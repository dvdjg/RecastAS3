/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include "AS3/AS3.h"
#define swig_as3(X) inline_as3("import com.adobe.flascc.swig.*; " X)


/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) {int msglen = strlen(msg);__asm__ volatile ("throw new Exception(CModule.readString(%0, %1))": : "r"(msg), "r"(msglen));}



#include "AS3/AS3.h"
#include <stdlib.h>
#include "Recast.h"
#include "DetourCrowd.h"
#include "InputGeom.h"
#include "DetourCommon.h"
#include "SoloMesh.h"
#include "Sample_TempObstacles.h"
#include "AS3/AS3.h"
#include <stdio.h>
#include <string.h>

__attribute__((annotate("as3sig:public function _wrap_RC_PI_get():Number")))
void _wrap_RC_PI_get() {
  float result ;
  
  result = (float)(float)RC_PI;
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_LOG_PROGRESS():int")))
void _wrap_RC_LOG_PROGRESS() {
  int result ;
  
  result = RC_LOG_PROGRESS;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_LOG_WARNING():int")))
void _wrap_RC_LOG_WARNING() {
  int result ;
  
  result = RC_LOG_WARNING;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_LOG_ERROR():int")))
void _wrap_RC_LOG_ERROR() {
  int result ;
  
  result = RC_LOG_ERROR;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_TOTAL():int")))
void _wrap_RC_TIMER_TOTAL() {
  int result ;
  
  result = RC_TIMER_TOTAL;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_TEMP():int")))
void _wrap_RC_TIMER_TEMP() {
  int result ;
  
  result = RC_TIMER_TEMP;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_RASTERIZE_TRIANGLES():int")))
void _wrap_RC_TIMER_RASTERIZE_TRIANGLES() {
  int result ;
  
  result = RC_TIMER_RASTERIZE_TRIANGLES;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_BUILD_COMPACTHEIGHTFIELD():int")))
void _wrap_RC_TIMER_BUILD_COMPACTHEIGHTFIELD() {
  int result ;
  
  result = RC_TIMER_BUILD_COMPACTHEIGHTFIELD;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_BUILD_CONTOURS():int")))
void _wrap_RC_TIMER_BUILD_CONTOURS() {
  int result ;
  
  result = RC_TIMER_BUILD_CONTOURS;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_BUILD_CONTOURS_TRACE():int")))
void _wrap_RC_TIMER_BUILD_CONTOURS_TRACE() {
  int result ;
  
  result = RC_TIMER_BUILD_CONTOURS_TRACE;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_BUILD_CONTOURS_SIMPLIFY():int")))
void _wrap_RC_TIMER_BUILD_CONTOURS_SIMPLIFY() {
  int result ;
  
  result = RC_TIMER_BUILD_CONTOURS_SIMPLIFY;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_FILTER_BORDER():int")))
void _wrap_RC_TIMER_FILTER_BORDER() {
  int result ;
  
  result = RC_TIMER_FILTER_BORDER;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_FILTER_WALKABLE():int")))
void _wrap_RC_TIMER_FILTER_WALKABLE() {
  int result ;
  
  result = RC_TIMER_FILTER_WALKABLE;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_MEDIAN_AREA():int")))
void _wrap_RC_TIMER_MEDIAN_AREA() {
  int result ;
  
  result = RC_TIMER_MEDIAN_AREA;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_FILTER_LOW_OBSTACLES():int")))
void _wrap_RC_TIMER_FILTER_LOW_OBSTACLES() {
  int result ;
  
  result = RC_TIMER_FILTER_LOW_OBSTACLES;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_BUILD_POLYMESH():int")))
void _wrap_RC_TIMER_BUILD_POLYMESH() {
  int result ;
  
  result = RC_TIMER_BUILD_POLYMESH;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_MERGE_POLYMESH():int")))
void _wrap_RC_TIMER_MERGE_POLYMESH() {
  int result ;
  
  result = RC_TIMER_MERGE_POLYMESH;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_ERODE_AREA():int")))
void _wrap_RC_TIMER_ERODE_AREA() {
  int result ;
  
  result = RC_TIMER_ERODE_AREA;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_MARK_BOX_AREA():int")))
void _wrap_RC_TIMER_MARK_BOX_AREA() {
  int result ;
  
  result = RC_TIMER_MARK_BOX_AREA;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_MARK_CYLINDER_AREA():int")))
void _wrap_RC_TIMER_MARK_CYLINDER_AREA() {
  int result ;
  
  result = RC_TIMER_MARK_CYLINDER_AREA;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_MARK_CONVEXPOLY_AREA():int")))
void _wrap_RC_TIMER_MARK_CONVEXPOLY_AREA() {
  int result ;
  
  result = RC_TIMER_MARK_CONVEXPOLY_AREA;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_BUILD_DISTANCEFIELD():int")))
void _wrap_RC_TIMER_BUILD_DISTANCEFIELD() {
  int result ;
  
  result = RC_TIMER_BUILD_DISTANCEFIELD;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_BUILD_DISTANCEFIELD_DIST():int")))
void _wrap_RC_TIMER_BUILD_DISTANCEFIELD_DIST() {
  int result ;
  
  result = RC_TIMER_BUILD_DISTANCEFIELD_DIST;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_BUILD_DISTANCEFIELD_BLUR():int")))
void _wrap_RC_TIMER_BUILD_DISTANCEFIELD_BLUR() {
  int result ;
  
  result = RC_TIMER_BUILD_DISTANCEFIELD_BLUR;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_BUILD_REGIONS():int")))
void _wrap_RC_TIMER_BUILD_REGIONS() {
  int result ;
  
  result = RC_TIMER_BUILD_REGIONS;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_BUILD_REGIONS_WATERSHED():int")))
void _wrap_RC_TIMER_BUILD_REGIONS_WATERSHED() {
  int result ;
  
  result = RC_TIMER_BUILD_REGIONS_WATERSHED;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_BUILD_REGIONS_EXPAND():int")))
void _wrap_RC_TIMER_BUILD_REGIONS_EXPAND() {
  int result ;
  
  result = RC_TIMER_BUILD_REGIONS_EXPAND;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_BUILD_REGIONS_FLOOD():int")))
void _wrap_RC_TIMER_BUILD_REGIONS_FLOOD() {
  int result ;
  
  result = RC_TIMER_BUILD_REGIONS_FLOOD;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_BUILD_REGIONS_FILTER():int")))
void _wrap_RC_TIMER_BUILD_REGIONS_FILTER() {
  int result ;
  
  result = RC_TIMER_BUILD_REGIONS_FILTER;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_BUILD_LAYERS():int")))
void _wrap_RC_TIMER_BUILD_LAYERS() {
  int result ;
  
  result = RC_TIMER_BUILD_LAYERS;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_BUILD_POLYMESHDETAIL():int")))
void _wrap_RC_TIMER_BUILD_POLYMESHDETAIL() {
  int result ;
  
  result = RC_TIMER_BUILD_POLYMESHDETAIL;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_TIMER_MERGE_POLYMESHDETAIL():int")))
void _wrap_RC_TIMER_MERGE_POLYMESHDETAIL() {
  int result ;
  
  result = RC_TIMER_MERGE_POLYMESHDETAIL;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_MAX_TIMERS():int")))
void _wrap_RC_MAX_TIMERS() {
  int result ;
  
  result = RC_MAX_TIMERS;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_new_rcContext(state:Boolean):int")))
void _wrap_new_rcContext() {
  bool arg1 ;
  rcContext *result ;
  
  {
    AS3_GetScalarFromVar(arg1, state);
  }
  result = (rcContext *)new rcContext(arg1);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_delete_rcContext(self):void")))
void _wrap_delete_rcContext() {
  rcContext *arg1 = (rcContext *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  delete arg1;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContext_enableLog(self, state:Boolean):void")))
void _wrap_rcContext_enableLog() {
  rcContext *arg1 = (rcContext *) 0 ;
  bool arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, state);
  }
  (arg1)->enableLog(arg2);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContext_resetLog(self):void")))
void _wrap_rcContext_resetLog() {
  rcContext *arg1 = (rcContext *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  (arg1)->resetLog();
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContext_log(self, category:int, format:String, arg4):void")))
void _wrap_rcContext_log() {
  rcContext *arg1 = (rcContext *) 0 ;
  rcLogCategory arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, category);
  }
  {
    AS3_MallocString(arg3, format);
  }
  
  (arg1)->log(arg2,(char const *)arg3,arg4);
  {
    free(arg3);
  }
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContext_enableTimer(self, state:Boolean):void")))
void _wrap_rcContext_enableTimer() {
  rcContext *arg1 = (rcContext *) 0 ;
  bool arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, state);
  }
  (arg1)->enableTimer(arg2);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContext_resetTimers(self):void")))
void _wrap_rcContext_resetTimers() {
  rcContext *arg1 = (rcContext *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  (arg1)->resetTimers();
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContext_startTimer(self, _label:int):void")))
void _wrap_rcContext_startTimer() {
  rcContext *arg1 = (rcContext *) 0 ;
  rcTimerLabel arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, _label);
  }
  (arg1)->startTimer(arg2);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContext_stopTimer(self, _label:int):void")))
void _wrap_rcContext_stopTimer() {
  rcContext *arg1 = (rcContext *) 0 ;
  rcTimerLabel arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, _label);
  }
  (arg1)->stopTimer(arg2);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContext_getAccumulatedTime(self, _label:int):int")))
void _wrap_rcContext_getAccumulatedTime() {
  rcContext *arg1 = (rcContext *) 0 ;
  rcTimerLabel arg2 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, _label);
  }
  result = (int)((rcContext const *)arg1)->getAccumulatedTime(arg2);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_width_set(self, width:int):void")))
void _wrap_rcConfig_width_set() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, width);
  }
  if (arg1) (arg1)->width = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_width_get(self):int")))
void _wrap_rcConfig_width_get() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->width);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_height_set(self, height:int):void")))
void _wrap_rcConfig_height_set() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, height);
  }
  if (arg1) (arg1)->height = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_height_get(self):int")))
void _wrap_rcConfig_height_get() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->height);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_tileSize_set(self, tileSize:int):void")))
void _wrap_rcConfig_tileSize_set() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, tileSize);
  }
  if (arg1) (arg1)->tileSize = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_tileSize_get(self):int")))
void _wrap_rcConfig_tileSize_get() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->tileSize);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_borderSize_set(self, borderSize:int):void")))
void _wrap_rcConfig_borderSize_set() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, borderSize);
  }
  if (arg1) (arg1)->borderSize = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_borderSize_get(self):int")))
void _wrap_rcConfig_borderSize_get() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->borderSize);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_cs_set(self, cs:Number):void")))
void _wrap_rcConfig_cs_set() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, cs);
  }
  if (arg1) (arg1)->cs = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_cs_get(self):Number")))
void _wrap_rcConfig_cs_get() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->cs);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_ch_set(self, ch:Number):void")))
void _wrap_rcConfig_ch_set() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, ch);
  }
  if (arg1) (arg1)->ch = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_ch_get(self):Number")))
void _wrap_rcConfig_ch_get() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->ch);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_bmin_set(self, bmin:int):void")))
void _wrap_rcConfig_bmin_set() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  float *arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, bmin);
  }
  {
    size_t ii;
    float *b = (float *) arg1->bmin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_bmin_get(self):int")))
void _wrap_rcConfig_bmin_get() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  float *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float *)(float *) ((arg1)->bmin);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_bmax_set(self, bmax:int):void")))
void _wrap_rcConfig_bmax_set() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  float *arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, bmax);
  }
  {
    size_t ii;
    float *b = (float *) arg1->bmax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_bmax_get(self):int")))
void _wrap_rcConfig_bmax_get() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  float *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float *)(float *) ((arg1)->bmax);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_walkableSlopeAngle_set(self, walkableSlopeAngle:Number):void")))
void _wrap_rcConfig_walkableSlopeAngle_set() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, walkableSlopeAngle);
  }
  if (arg1) (arg1)->walkableSlopeAngle = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_walkableSlopeAngle_get(self):Number")))
void _wrap_rcConfig_walkableSlopeAngle_get() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->walkableSlopeAngle);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_walkableHeight_set(self, walkableHeight:int):void")))
void _wrap_rcConfig_walkableHeight_set() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, walkableHeight);
  }
  if (arg1) (arg1)->walkableHeight = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_walkableHeight_get(self):int")))
void _wrap_rcConfig_walkableHeight_get() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->walkableHeight);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_walkableClimb_set(self, walkableClimb:int):void")))
void _wrap_rcConfig_walkableClimb_set() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, walkableClimb);
  }
  if (arg1) (arg1)->walkableClimb = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_walkableClimb_get(self):int")))
void _wrap_rcConfig_walkableClimb_get() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->walkableClimb);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_walkableRadius_set(self, walkableRadius:int):void")))
void _wrap_rcConfig_walkableRadius_set() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, walkableRadius);
  }
  if (arg1) (arg1)->walkableRadius = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_walkableRadius_get(self):int")))
void _wrap_rcConfig_walkableRadius_get() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->walkableRadius);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_maxEdgeLen_set(self, maxEdgeLen:int):void")))
void _wrap_rcConfig_maxEdgeLen_set() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, maxEdgeLen);
  }
  if (arg1) (arg1)->maxEdgeLen = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_maxEdgeLen_get(self):int")))
void _wrap_rcConfig_maxEdgeLen_get() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->maxEdgeLen);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_maxSimplificationError_set(self, maxSimplificationError:Number):void")))
void _wrap_rcConfig_maxSimplificationError_set() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, maxSimplificationError);
  }
  if (arg1) (arg1)->maxSimplificationError = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_maxSimplificationError_get(self):Number")))
void _wrap_rcConfig_maxSimplificationError_get() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->maxSimplificationError);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_minRegionArea_set(self, minRegionArea:int):void")))
void _wrap_rcConfig_minRegionArea_set() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, minRegionArea);
  }
  if (arg1) (arg1)->minRegionArea = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_minRegionArea_get(self):int")))
void _wrap_rcConfig_minRegionArea_get() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->minRegionArea);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_mergeRegionArea_set(self, mergeRegionArea:int):void")))
void _wrap_rcConfig_mergeRegionArea_set() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, mergeRegionArea);
  }
  if (arg1) (arg1)->mergeRegionArea = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_mergeRegionArea_get(self):int")))
void _wrap_rcConfig_mergeRegionArea_get() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->mergeRegionArea);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_maxVertsPerPoly_set(self, maxVertsPerPoly:int):void")))
void _wrap_rcConfig_maxVertsPerPoly_set() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, maxVertsPerPoly);
  }
  if (arg1) (arg1)->maxVertsPerPoly = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_maxVertsPerPoly_get(self):int")))
void _wrap_rcConfig_maxVertsPerPoly_get() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->maxVertsPerPoly);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_detailSampleDist_set(self, detailSampleDist:Number):void")))
void _wrap_rcConfig_detailSampleDist_set() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, detailSampleDist);
  }
  if (arg1) (arg1)->detailSampleDist = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_detailSampleDist_get(self):Number")))
void _wrap_rcConfig_detailSampleDist_get() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->detailSampleDist);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_detailSampleMaxError_set(self, detailSampleMaxError:Number):void")))
void _wrap_rcConfig_detailSampleMaxError_set() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, detailSampleMaxError);
  }
  if (arg1) (arg1)->detailSampleMaxError = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcConfig_detailSampleMaxError_get(self):Number")))
void _wrap_rcConfig_detailSampleMaxError_get() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->detailSampleMaxError);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_new_rcConfig():int")))
void _wrap_new_rcConfig() {
  rcConfig *result ;
  
  result = (rcConfig *)new rcConfig();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_delete_rcConfig(self):void")))
void _wrap_delete_rcConfig() {
  rcConfig *arg1 = (rcConfig *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  delete arg1;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_SPAN_HEIGHT_BITS_get():int")))
void _wrap_RC_SPAN_HEIGHT_BITS_get() {
  int result ;
  
  result = (int)(int)RC_SPAN_HEIGHT_BITS;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_SPAN_MAX_HEIGHT_get():int")))
void _wrap_RC_SPAN_MAX_HEIGHT_get() {
  int result ;
  
  result = (int)(int)RC_SPAN_MAX_HEIGHT;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_SPANS_PER_POOL_get():int")))
void _wrap_RC_SPANS_PER_POOL_get() {
  int result ;
  
  result = (int)(int)RC_SPANS_PER_POOL;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcSpan_smin_set(self, smin:int):void")))
void _wrap_rcSpan_smin_set() {
  rcSpan *arg1 = (rcSpan *) 0 ;
  unsigned int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, smin);
  }
  if (arg1) (arg1)->smin = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcSpan_smin_get(self):int")))
void _wrap_rcSpan_smin_get() {
  rcSpan *arg1 = (rcSpan *) 0 ;
  unsigned int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned int) ((arg1)->smin);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcSpan_smax_set(self, smax:int):void")))
void _wrap_rcSpan_smax_set() {
  rcSpan *arg1 = (rcSpan *) 0 ;
  unsigned int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, smax);
  }
  if (arg1) (arg1)->smax = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcSpan_smax_get(self):int")))
void _wrap_rcSpan_smax_get() {
  rcSpan *arg1 = (rcSpan *) 0 ;
  unsigned int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned int) ((arg1)->smax);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcSpan_area_set(self, area:int):void")))
void _wrap_rcSpan_area_set() {
  rcSpan *arg1 = (rcSpan *) 0 ;
  unsigned int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, area);
  }
  if (arg1) (arg1)->area = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcSpan_area_get(self):int")))
void _wrap_rcSpan_area_get() {
  rcSpan *arg1 = (rcSpan *) 0 ;
  unsigned int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned int) ((arg1)->area);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcSpan_next_set(self, next:int):void")))
void _wrap_rcSpan_next_set() {
  rcSpan *arg1 = (rcSpan *) 0 ;
  rcSpan *arg2 = (rcSpan *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, next);
  }
  if (arg1) (arg1)->next = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcSpan_next_get(self):int")))
void _wrap_rcSpan_next_get() {
  rcSpan *arg1 = (rcSpan *) 0 ;
  rcSpan *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (rcSpan *) ((arg1)->next);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_new_rcSpan():int")))
void _wrap_new_rcSpan() {
  rcSpan *result ;
  
  result = (rcSpan *)new rcSpan();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_delete_rcSpan(self):void")))
void _wrap_delete_rcSpan() {
  rcSpan *arg1 = (rcSpan *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  delete arg1;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcSpanPool_next_set(self, next:int):void")))
void _wrap_rcSpanPool_next_set() {
  rcSpanPool *arg1 = (rcSpanPool *) 0 ;
  rcSpanPool *arg2 = (rcSpanPool *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, next);
  }
  if (arg1) (arg1)->next = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcSpanPool_next_get(self):int")))
void _wrap_rcSpanPool_next_get() {
  rcSpanPool *arg1 = (rcSpanPool *) 0 ;
  rcSpanPool *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (rcSpanPool *) ((arg1)->next);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcSpanPool_items_set(self, items:int):void")))
void _wrap_rcSpanPool_items_set() {
  rcSpanPool *arg1 = (rcSpanPool *) 0 ;
  rcSpan *arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, items);
  }
  {
    size_t ii;
    rcSpan *b = (rcSpan *) arg1->items;
    for (ii = 0; ii < (size_t)RC_SPANS_PER_POOL; ii++) b[ii] = *((rcSpan *) arg2 + ii);
  }
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcSpanPool_items_get(self):int")))
void _wrap_rcSpanPool_items_get() {
  rcSpanPool *arg1 = (rcSpanPool *) 0 ;
  rcSpan *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (rcSpan *)(rcSpan *) ((arg1)->items);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_new_rcSpanPool():int")))
void _wrap_new_rcSpanPool() {
  rcSpanPool *result ;
  
  result = (rcSpanPool *)new rcSpanPool();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_delete_rcSpanPool(self):void")))
void _wrap_delete_rcSpanPool() {
  rcSpanPool *arg1 = (rcSpanPool *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  delete arg1;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfield_width_set(self, width:int):void")))
void _wrap_rcHeightfield_width_set() {
  rcHeightfield *arg1 = (rcHeightfield *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, width);
  }
  if (arg1) (arg1)->width = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfield_width_get(self):int")))
void _wrap_rcHeightfield_width_get() {
  rcHeightfield *arg1 = (rcHeightfield *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->width);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfield_height_set(self, height:int):void")))
void _wrap_rcHeightfield_height_set() {
  rcHeightfield *arg1 = (rcHeightfield *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, height);
  }
  if (arg1) (arg1)->height = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfield_height_get(self):int")))
void _wrap_rcHeightfield_height_get() {
  rcHeightfield *arg1 = (rcHeightfield *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->height);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfield_bmin_set(self, bmin:int):void")))
void _wrap_rcHeightfield_bmin_set() {
  rcHeightfield *arg1 = (rcHeightfield *) 0 ;
  float *arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, bmin);
  }
  {
    size_t ii;
    float *b = (float *) arg1->bmin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfield_bmin_get(self):int")))
void _wrap_rcHeightfield_bmin_get() {
  rcHeightfield *arg1 = (rcHeightfield *) 0 ;
  float *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float *)(float *) ((arg1)->bmin);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfield_bmax_set(self, bmax:int):void")))
void _wrap_rcHeightfield_bmax_set() {
  rcHeightfield *arg1 = (rcHeightfield *) 0 ;
  float *arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, bmax);
  }
  {
    size_t ii;
    float *b = (float *) arg1->bmax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfield_bmax_get(self):int")))
void _wrap_rcHeightfield_bmax_get() {
  rcHeightfield *arg1 = (rcHeightfield *) 0 ;
  float *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float *)(float *) ((arg1)->bmax);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfield_cs_set(self, cs:Number):void")))
void _wrap_rcHeightfield_cs_set() {
  rcHeightfield *arg1 = (rcHeightfield *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, cs);
  }
  if (arg1) (arg1)->cs = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfield_cs_get(self):Number")))
void _wrap_rcHeightfield_cs_get() {
  rcHeightfield *arg1 = (rcHeightfield *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->cs);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfield_ch_set(self, ch:Number):void")))
void _wrap_rcHeightfield_ch_set() {
  rcHeightfield *arg1 = (rcHeightfield *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, ch);
  }
  if (arg1) (arg1)->ch = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfield_ch_get(self):Number")))
void _wrap_rcHeightfield_ch_get() {
  rcHeightfield *arg1 = (rcHeightfield *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->ch);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfield_spans_set(self, spans:int):void")))
void _wrap_rcHeightfield_spans_set() {
  rcHeightfield *arg1 = (rcHeightfield *) 0 ;
  rcSpan **arg2 = (rcSpan **) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, spans);
  }
  if (arg1) (arg1)->spans = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfield_spans_get(self):int")))
void _wrap_rcHeightfield_spans_get() {
  rcHeightfield *arg1 = (rcHeightfield *) 0 ;
  rcSpan **result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (rcSpan **) ((arg1)->spans);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfield_pools_set(self, pools:int):void")))
void _wrap_rcHeightfield_pools_set() {
  rcHeightfield *arg1 = (rcHeightfield *) 0 ;
  rcSpanPool *arg2 = (rcSpanPool *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, pools);
  }
  if (arg1) (arg1)->pools = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfield_pools_get(self):int")))
void _wrap_rcHeightfield_pools_get() {
  rcHeightfield *arg1 = (rcHeightfield *) 0 ;
  rcSpanPool *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (rcSpanPool *) ((arg1)->pools);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfield_freelist_set(self, freelist:int):void")))
void _wrap_rcHeightfield_freelist_set() {
  rcHeightfield *arg1 = (rcHeightfield *) 0 ;
  rcSpan *arg2 = (rcSpan *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, freelist);
  }
  if (arg1) (arg1)->freelist = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfield_freelist_get(self):int")))
void _wrap_rcHeightfield_freelist_get() {
  rcHeightfield *arg1 = (rcHeightfield *) 0 ;
  rcSpan *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (rcSpan *) ((arg1)->freelist);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_new_rcHeightfield():int")))
void _wrap_new_rcHeightfield() {
  rcHeightfield *result ;
  
  result = (rcHeightfield *)new rcHeightfield();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_delete_rcHeightfield(self):void")))
void _wrap_delete_rcHeightfield() {
  rcHeightfield *arg1 = (rcHeightfield *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  delete arg1;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactCell_index_set(self, index:int):void")))
void _wrap_rcCompactCell_index_set() {
  rcCompactCell *arg1 = (rcCompactCell *) 0 ;
  unsigned int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, index);
  }
  if (arg1) (arg1)->index = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactCell_index_get(self):int")))
void _wrap_rcCompactCell_index_get() {
  rcCompactCell *arg1 = (rcCompactCell *) 0 ;
  unsigned int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned int) ((arg1)->index);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactCell_count_set(self, count:int):void")))
void _wrap_rcCompactCell_count_set() {
  rcCompactCell *arg1 = (rcCompactCell *) 0 ;
  unsigned int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, count);
  }
  if (arg1) (arg1)->count = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactCell_count_get(self):int")))
void _wrap_rcCompactCell_count_get() {
  rcCompactCell *arg1 = (rcCompactCell *) 0 ;
  unsigned int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned int) ((arg1)->count);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_new_rcCompactCell():int")))
void _wrap_new_rcCompactCell() {
  rcCompactCell *result ;
  
  result = (rcCompactCell *)new rcCompactCell();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_delete_rcCompactCell(self):void")))
void _wrap_delete_rcCompactCell() {
  rcCompactCell *arg1 = (rcCompactCell *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  delete arg1;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactSpan_y_set(self, y:int):void")))
void _wrap_rcCompactSpan_y_set() {
  rcCompactSpan *arg1 = (rcCompactSpan *) 0 ;
  unsigned short arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, y);
  }
  if (arg1) (arg1)->y = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactSpan_y_get(self):int")))
void _wrap_rcCompactSpan_y_get() {
  rcCompactSpan *arg1 = (rcCompactSpan *) 0 ;
  unsigned short result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned short) ((arg1)->y);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactSpan_reg_set(self, reg:int):void")))
void _wrap_rcCompactSpan_reg_set() {
  rcCompactSpan *arg1 = (rcCompactSpan *) 0 ;
  unsigned short arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, reg);
  }
  if (arg1) (arg1)->reg = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactSpan_reg_get(self):int")))
void _wrap_rcCompactSpan_reg_get() {
  rcCompactSpan *arg1 = (rcCompactSpan *) 0 ;
  unsigned short result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned short) ((arg1)->reg);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactSpan_con_set(self, con:int):void")))
void _wrap_rcCompactSpan_con_set() {
  rcCompactSpan *arg1 = (rcCompactSpan *) 0 ;
  unsigned int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, con);
  }
  if (arg1) (arg1)->con = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactSpan_con_get(self):int")))
void _wrap_rcCompactSpan_con_get() {
  rcCompactSpan *arg1 = (rcCompactSpan *) 0 ;
  unsigned int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned int) ((arg1)->con);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactSpan_h_set(self, h:int):void")))
void _wrap_rcCompactSpan_h_set() {
  rcCompactSpan *arg1 = (rcCompactSpan *) 0 ;
  unsigned int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, h);
  }
  if (arg1) (arg1)->h = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactSpan_h_get(self):int")))
void _wrap_rcCompactSpan_h_get() {
  rcCompactSpan *arg1 = (rcCompactSpan *) 0 ;
  unsigned int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned int) ((arg1)->h);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_new_rcCompactSpan():int")))
void _wrap_new_rcCompactSpan() {
  rcCompactSpan *result ;
  
  result = (rcCompactSpan *)new rcCompactSpan();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_delete_rcCompactSpan(self):void")))
void _wrap_delete_rcCompactSpan() {
  rcCompactSpan *arg1 = (rcCompactSpan *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  delete arg1;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_width_set(self, width:int):void")))
void _wrap_rcCompactHeightfield_width_set() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, width);
  }
  if (arg1) (arg1)->width = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_width_get(self):int")))
void _wrap_rcCompactHeightfield_width_get() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->width);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_height_set(self, height:int):void")))
void _wrap_rcCompactHeightfield_height_set() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, height);
  }
  if (arg1) (arg1)->height = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_height_get(self):int")))
void _wrap_rcCompactHeightfield_height_get() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->height);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_spanCount_set(self, spanCount:int):void")))
void _wrap_rcCompactHeightfield_spanCount_set() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, spanCount);
  }
  if (arg1) (arg1)->spanCount = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_spanCount_get(self):int")))
void _wrap_rcCompactHeightfield_spanCount_get() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->spanCount);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_walkableHeight_set(self, walkableHeight:int):void")))
void _wrap_rcCompactHeightfield_walkableHeight_set() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, walkableHeight);
  }
  if (arg1) (arg1)->walkableHeight = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_walkableHeight_get(self):int")))
void _wrap_rcCompactHeightfield_walkableHeight_get() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->walkableHeight);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_walkableClimb_set(self, walkableClimb:int):void")))
void _wrap_rcCompactHeightfield_walkableClimb_set() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, walkableClimb);
  }
  if (arg1) (arg1)->walkableClimb = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_walkableClimb_get(self):int")))
void _wrap_rcCompactHeightfield_walkableClimb_get() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->walkableClimb);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_borderSize_set(self, borderSize:int):void")))
void _wrap_rcCompactHeightfield_borderSize_set() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, borderSize);
  }
  if (arg1) (arg1)->borderSize = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_borderSize_get(self):int")))
void _wrap_rcCompactHeightfield_borderSize_get() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->borderSize);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_maxDistance_set(self, maxDistance:int):void")))
void _wrap_rcCompactHeightfield_maxDistance_set() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  unsigned short arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, maxDistance);
  }
  if (arg1) (arg1)->maxDistance = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_maxDistance_get(self):int")))
void _wrap_rcCompactHeightfield_maxDistance_get() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  unsigned short result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned short) ((arg1)->maxDistance);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_maxRegions_set(self, maxRegions:int):void")))
void _wrap_rcCompactHeightfield_maxRegions_set() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  unsigned short arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, maxRegions);
  }
  if (arg1) (arg1)->maxRegions = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_maxRegions_get(self):int")))
void _wrap_rcCompactHeightfield_maxRegions_get() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  unsigned short result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned short) ((arg1)->maxRegions);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_bmin_set(self, bmin:int):void")))
void _wrap_rcCompactHeightfield_bmin_set() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  float *arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, bmin);
  }
  {
    size_t ii;
    float *b = (float *) arg1->bmin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_bmin_get(self):int")))
void _wrap_rcCompactHeightfield_bmin_get() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  float *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float *)(float *) ((arg1)->bmin);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_bmax_set(self, bmax:int):void")))
void _wrap_rcCompactHeightfield_bmax_set() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  float *arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, bmax);
  }
  {
    size_t ii;
    float *b = (float *) arg1->bmax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_bmax_get(self):int")))
void _wrap_rcCompactHeightfield_bmax_get() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  float *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float *)(float *) ((arg1)->bmax);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_cs_set(self, cs:Number):void")))
void _wrap_rcCompactHeightfield_cs_set() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, cs);
  }
  if (arg1) (arg1)->cs = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_cs_get(self):Number")))
void _wrap_rcCompactHeightfield_cs_get() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->cs);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_ch_set(self, ch:Number):void")))
void _wrap_rcCompactHeightfield_ch_set() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, ch);
  }
  if (arg1) (arg1)->ch = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_ch_get(self):Number")))
void _wrap_rcCompactHeightfield_ch_get() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->ch);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_cells_set(self, cells:int):void")))
void _wrap_rcCompactHeightfield_cells_set() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  rcCompactCell *arg2 = (rcCompactCell *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, cells);
  }
  if (arg1) (arg1)->cells = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_cells_get(self):int")))
void _wrap_rcCompactHeightfield_cells_get() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  rcCompactCell *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (rcCompactCell *) ((arg1)->cells);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_spans_set(self, spans:int):void")))
void _wrap_rcCompactHeightfield_spans_set() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  rcCompactSpan *arg2 = (rcCompactSpan *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, spans);
  }
  if (arg1) (arg1)->spans = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_spans_get(self):int")))
void _wrap_rcCompactHeightfield_spans_get() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  rcCompactSpan *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (rcCompactSpan *) ((arg1)->spans);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_dist_set(self, dist:int):void")))
void _wrap_rcCompactHeightfield_dist_set() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, dist);
  }
  if (arg1) (arg1)->dist = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_dist_get(self):int")))
void _wrap_rcCompactHeightfield_dist_get() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  unsigned short *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned short *) ((arg1)->dist);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_areas_set(self, areas:int):void")))
void _wrap_rcCompactHeightfield_areas_set() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, areas);
  }
  if (arg1) (arg1)->areas = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCompactHeightfield_areas_get(self):int")))
void _wrap_rcCompactHeightfield_areas_get() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  unsigned char *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned char *) ((arg1)->areas);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_new_rcCompactHeightfield():int")))
void _wrap_new_rcCompactHeightfield() {
  rcCompactHeightfield *result ;
  
  result = (rcCompactHeightfield *)new rcCompactHeightfield();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_delete_rcCompactHeightfield(self):void")))
void _wrap_delete_rcCompactHeightfield() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  delete arg1;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_bmin_set(self, bmin:int):void")))
void _wrap_rcHeightfieldLayer_bmin_set() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  float *arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, bmin);
  }
  {
    size_t ii;
    float *b = (float *) arg1->bmin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_bmin_get(self):int")))
void _wrap_rcHeightfieldLayer_bmin_get() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  float *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float *)(float *) ((arg1)->bmin);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_bmax_set(self, bmax:int):void")))
void _wrap_rcHeightfieldLayer_bmax_set() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  float *arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, bmax);
  }
  {
    size_t ii;
    float *b = (float *) arg1->bmax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_bmax_get(self):int")))
void _wrap_rcHeightfieldLayer_bmax_get() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  float *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float *)(float *) ((arg1)->bmax);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_cs_set(self, cs:Number):void")))
void _wrap_rcHeightfieldLayer_cs_set() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, cs);
  }
  if (arg1) (arg1)->cs = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_cs_get(self):Number")))
void _wrap_rcHeightfieldLayer_cs_get() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->cs);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_ch_set(self, ch:Number):void")))
void _wrap_rcHeightfieldLayer_ch_set() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, ch);
  }
  if (arg1) (arg1)->ch = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_ch_get(self):Number")))
void _wrap_rcHeightfieldLayer_ch_get() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->ch);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_width_set(self, width:int):void")))
void _wrap_rcHeightfieldLayer_width_set() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, width);
  }
  if (arg1) (arg1)->width = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_width_get(self):int")))
void _wrap_rcHeightfieldLayer_width_get() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->width);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_height_set(self, height:int):void")))
void _wrap_rcHeightfieldLayer_height_set() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, height);
  }
  if (arg1) (arg1)->height = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_height_get(self):int")))
void _wrap_rcHeightfieldLayer_height_get() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->height);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_minx_set(self, minx:int):void")))
void _wrap_rcHeightfieldLayer_minx_set() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, minx);
  }
  if (arg1) (arg1)->minx = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_minx_get(self):int")))
void _wrap_rcHeightfieldLayer_minx_get() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->minx);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_maxx_set(self, maxx:int):void")))
void _wrap_rcHeightfieldLayer_maxx_set() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, maxx);
  }
  if (arg1) (arg1)->maxx = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_maxx_get(self):int")))
void _wrap_rcHeightfieldLayer_maxx_get() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->maxx);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_miny_set(self, miny:int):void")))
void _wrap_rcHeightfieldLayer_miny_set() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, miny);
  }
  if (arg1) (arg1)->miny = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_miny_get(self):int")))
void _wrap_rcHeightfieldLayer_miny_get() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->miny);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_maxy_set(self, maxy:int):void")))
void _wrap_rcHeightfieldLayer_maxy_set() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, maxy);
  }
  if (arg1) (arg1)->maxy = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_maxy_get(self):int")))
void _wrap_rcHeightfieldLayer_maxy_get() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->maxy);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_hmin_set(self, hmin:int):void")))
void _wrap_rcHeightfieldLayer_hmin_set() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, hmin);
  }
  if (arg1) (arg1)->hmin = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_hmin_get(self):int")))
void _wrap_rcHeightfieldLayer_hmin_get() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->hmin);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_hmax_set(self, hmax:int):void")))
void _wrap_rcHeightfieldLayer_hmax_set() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, hmax);
  }
  if (arg1) (arg1)->hmax = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_hmax_get(self):int")))
void _wrap_rcHeightfieldLayer_hmax_get() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->hmax);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_heights_set(self, heights:int):void")))
void _wrap_rcHeightfieldLayer_heights_set() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, heights);
  }
  if (arg1) (arg1)->heights = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_heights_get(self):int")))
void _wrap_rcHeightfieldLayer_heights_get() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  unsigned char *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned char *) ((arg1)->heights);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_areas_set(self, areas:int):void")))
void _wrap_rcHeightfieldLayer_areas_set() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, areas);
  }
  if (arg1) (arg1)->areas = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_areas_get(self):int")))
void _wrap_rcHeightfieldLayer_areas_get() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  unsigned char *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned char *) ((arg1)->areas);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_cons_set(self, cons:int):void")))
void _wrap_rcHeightfieldLayer_cons_set() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, cons);
  }
  if (arg1) (arg1)->cons = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayer_cons_get(self):int")))
void _wrap_rcHeightfieldLayer_cons_get() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  unsigned char *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned char *) ((arg1)->cons);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_new_rcHeightfieldLayer():int")))
void _wrap_new_rcHeightfieldLayer() {
  rcHeightfieldLayer *result ;
  
  result = (rcHeightfieldLayer *)new rcHeightfieldLayer();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_delete_rcHeightfieldLayer(self):void")))
void _wrap_delete_rcHeightfieldLayer() {
  rcHeightfieldLayer *arg1 = (rcHeightfieldLayer *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  delete arg1;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayerSet_layers_set(self, layers:int):void")))
void _wrap_rcHeightfieldLayerSet_layers_set() {
  rcHeightfieldLayerSet *arg1 = (rcHeightfieldLayerSet *) 0 ;
  rcHeightfieldLayer *arg2 = (rcHeightfieldLayer *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, layers);
  }
  if (arg1) (arg1)->layers = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayerSet_layers_get(self):int")))
void _wrap_rcHeightfieldLayerSet_layers_get() {
  rcHeightfieldLayerSet *arg1 = (rcHeightfieldLayerSet *) 0 ;
  rcHeightfieldLayer *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (rcHeightfieldLayer *) ((arg1)->layers);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayerSet_nlayers_set(self, nlayers:int):void")))
void _wrap_rcHeightfieldLayerSet_nlayers_set() {
  rcHeightfieldLayerSet *arg1 = (rcHeightfieldLayerSet *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, nlayers);
  }
  if (arg1) (arg1)->nlayers = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcHeightfieldLayerSet_nlayers_get(self):int")))
void _wrap_rcHeightfieldLayerSet_nlayers_get() {
  rcHeightfieldLayerSet *arg1 = (rcHeightfieldLayerSet *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->nlayers);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_new_rcHeightfieldLayerSet():int")))
void _wrap_new_rcHeightfieldLayerSet() {
  rcHeightfieldLayerSet *result ;
  
  result = (rcHeightfieldLayerSet *)new rcHeightfieldLayerSet();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_delete_rcHeightfieldLayerSet(self):void")))
void _wrap_delete_rcHeightfieldLayerSet() {
  rcHeightfieldLayerSet *arg1 = (rcHeightfieldLayerSet *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  delete arg1;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContour_verts_set(self, verts:int):void")))
void _wrap_rcContour_verts_set() {
  rcContour *arg1 = (rcContour *) 0 ;
  int *arg2 = (int *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, verts);
  }
  if (arg1) (arg1)->verts = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContour_verts_get(self):int")))
void _wrap_rcContour_verts_get() {
  rcContour *arg1 = (rcContour *) 0 ;
  int *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int *) ((arg1)->verts);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContour_nverts_set(self, nverts:int):void")))
void _wrap_rcContour_nverts_set() {
  rcContour *arg1 = (rcContour *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, nverts);
  }
  if (arg1) (arg1)->nverts = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContour_nverts_get(self):int")))
void _wrap_rcContour_nverts_get() {
  rcContour *arg1 = (rcContour *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->nverts);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContour_rverts_set(self, rverts:int):void")))
void _wrap_rcContour_rverts_set() {
  rcContour *arg1 = (rcContour *) 0 ;
  int *arg2 = (int *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, rverts);
  }
  if (arg1) (arg1)->rverts = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContour_rverts_get(self):int")))
void _wrap_rcContour_rverts_get() {
  rcContour *arg1 = (rcContour *) 0 ;
  int *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int *) ((arg1)->rverts);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContour_nrverts_set(self, nrverts:int):void")))
void _wrap_rcContour_nrverts_set() {
  rcContour *arg1 = (rcContour *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, nrverts);
  }
  if (arg1) (arg1)->nrverts = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContour_nrverts_get(self):int")))
void _wrap_rcContour_nrverts_get() {
  rcContour *arg1 = (rcContour *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->nrverts);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContour_reg_set(self, reg:int):void")))
void _wrap_rcContour_reg_set() {
  rcContour *arg1 = (rcContour *) 0 ;
  unsigned short arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, reg);
  }
  if (arg1) (arg1)->reg = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContour_reg_get(self):int")))
void _wrap_rcContour_reg_get() {
  rcContour *arg1 = (rcContour *) 0 ;
  unsigned short result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned short) ((arg1)->reg);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContour_area_set(self, area:String):void")))
void _wrap_rcContour_area_set() {
  rcContour *arg1 = (rcContour *) 0 ;
  unsigned char arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    inline_nonreentrant_as3(
      "%0 = area.charCodeAt(0)" : "=r"(arg2)
      );
  }
  if (arg1) (arg1)->area = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContour_area_get(self):String")))
void _wrap_rcContour_area_get() {
  rcContour *arg1 = (rcContour *) 0 ;
  unsigned char result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned char) ((arg1)->area);
  {
    AS3_DeclareVar(asresult, String);
    AS3_CopyCStringToVar(asresult, &result, 1);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_new_rcContour():int")))
void _wrap_new_rcContour() {
  rcContour *result ;
  
  result = (rcContour *)new rcContour();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_delete_rcContour(self):void")))
void _wrap_delete_rcContour() {
  rcContour *arg1 = (rcContour *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  delete arg1;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContourSet_conts_set(self, conts:int):void")))
void _wrap_rcContourSet_conts_set() {
  rcContourSet *arg1 = (rcContourSet *) 0 ;
  rcContour *arg2 = (rcContour *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, conts);
  }
  if (arg1) (arg1)->conts = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContourSet_conts_get(self):int")))
void _wrap_rcContourSet_conts_get() {
  rcContourSet *arg1 = (rcContourSet *) 0 ;
  rcContour *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (rcContour *) ((arg1)->conts);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContourSet_nconts_set(self, nconts:int):void")))
void _wrap_rcContourSet_nconts_set() {
  rcContourSet *arg1 = (rcContourSet *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, nconts);
  }
  if (arg1) (arg1)->nconts = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContourSet_nconts_get(self):int")))
void _wrap_rcContourSet_nconts_get() {
  rcContourSet *arg1 = (rcContourSet *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->nconts);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContourSet_bmin_set(self, bmin:int):void")))
void _wrap_rcContourSet_bmin_set() {
  rcContourSet *arg1 = (rcContourSet *) 0 ;
  float *arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, bmin);
  }
  {
    size_t ii;
    float *b = (float *) arg1->bmin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContourSet_bmin_get(self):int")))
void _wrap_rcContourSet_bmin_get() {
  rcContourSet *arg1 = (rcContourSet *) 0 ;
  float *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float *)(float *) ((arg1)->bmin);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContourSet_bmax_set(self, bmax:int):void")))
void _wrap_rcContourSet_bmax_set() {
  rcContourSet *arg1 = (rcContourSet *) 0 ;
  float *arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, bmax);
  }
  {
    size_t ii;
    float *b = (float *) arg1->bmax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContourSet_bmax_get(self):int")))
void _wrap_rcContourSet_bmax_get() {
  rcContourSet *arg1 = (rcContourSet *) 0 ;
  float *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float *)(float *) ((arg1)->bmax);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContourSet_cs_set(self, cs:Number):void")))
void _wrap_rcContourSet_cs_set() {
  rcContourSet *arg1 = (rcContourSet *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, cs);
  }
  if (arg1) (arg1)->cs = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContourSet_cs_get(self):Number")))
void _wrap_rcContourSet_cs_get() {
  rcContourSet *arg1 = (rcContourSet *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->cs);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContourSet_ch_set(self, ch:Number):void")))
void _wrap_rcContourSet_ch_set() {
  rcContourSet *arg1 = (rcContourSet *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, ch);
  }
  if (arg1) (arg1)->ch = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContourSet_ch_get(self):Number")))
void _wrap_rcContourSet_ch_get() {
  rcContourSet *arg1 = (rcContourSet *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->ch);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContourSet_width_set(self, width:int):void")))
void _wrap_rcContourSet_width_set() {
  rcContourSet *arg1 = (rcContourSet *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, width);
  }
  if (arg1) (arg1)->width = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContourSet_width_get(self):int")))
void _wrap_rcContourSet_width_get() {
  rcContourSet *arg1 = (rcContourSet *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->width);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContourSet_height_set(self, height:int):void")))
void _wrap_rcContourSet_height_set() {
  rcContourSet *arg1 = (rcContourSet *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, height);
  }
  if (arg1) (arg1)->height = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContourSet_height_get(self):int")))
void _wrap_rcContourSet_height_get() {
  rcContourSet *arg1 = (rcContourSet *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->height);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContourSet_borderSize_set(self, borderSize:int):void")))
void _wrap_rcContourSet_borderSize_set() {
  rcContourSet *arg1 = (rcContourSet *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, borderSize);
  }
  if (arg1) (arg1)->borderSize = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcContourSet_borderSize_get(self):int")))
void _wrap_rcContourSet_borderSize_get() {
  rcContourSet *arg1 = (rcContourSet *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->borderSize);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_new_rcContourSet():int")))
void _wrap_new_rcContourSet() {
  rcContourSet *result ;
  
  result = (rcContourSet *)new rcContourSet();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_delete_rcContourSet(self):void")))
void _wrap_delete_rcContourSet() {
  rcContourSet *arg1 = (rcContourSet *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  delete arg1;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_verts_set(self, verts:int):void")))
void _wrap_rcPolyMesh_verts_set() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, verts);
  }
  if (arg1) (arg1)->verts = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_verts_get(self):int")))
void _wrap_rcPolyMesh_verts_get() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  unsigned short *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned short *) ((arg1)->verts);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_polys_set(self, polys:int):void")))
void _wrap_rcPolyMesh_polys_set() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, polys);
  }
  if (arg1) (arg1)->polys = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_polys_get(self):int")))
void _wrap_rcPolyMesh_polys_get() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  unsigned short *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned short *) ((arg1)->polys);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_regs_set(self, regs:int):void")))
void _wrap_rcPolyMesh_regs_set() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, regs);
  }
  if (arg1) (arg1)->regs = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_regs_get(self):int")))
void _wrap_rcPolyMesh_regs_get() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  unsigned short *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned short *) ((arg1)->regs);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_flags_set(self, flags:int):void")))
void _wrap_rcPolyMesh_flags_set() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, flags);
  }
  if (arg1) (arg1)->flags = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_flags_get(self):int")))
void _wrap_rcPolyMesh_flags_get() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  unsigned short *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned short *) ((arg1)->flags);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_areas_set(self, areas:int):void")))
void _wrap_rcPolyMesh_areas_set() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, areas);
  }
  if (arg1) (arg1)->areas = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_areas_get(self):int")))
void _wrap_rcPolyMesh_areas_get() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  unsigned char *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned char *) ((arg1)->areas);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_nverts_set(self, nverts:int):void")))
void _wrap_rcPolyMesh_nverts_set() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, nverts);
  }
  if (arg1) (arg1)->nverts = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_nverts_get(self):int")))
void _wrap_rcPolyMesh_nverts_get() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->nverts);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_npolys_set(self, npolys:int):void")))
void _wrap_rcPolyMesh_npolys_set() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, npolys);
  }
  if (arg1) (arg1)->npolys = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_npolys_get(self):int")))
void _wrap_rcPolyMesh_npolys_get() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->npolys);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_maxpolys_set(self, maxpolys:int):void")))
void _wrap_rcPolyMesh_maxpolys_set() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, maxpolys);
  }
  if (arg1) (arg1)->maxpolys = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_maxpolys_get(self):int")))
void _wrap_rcPolyMesh_maxpolys_get() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->maxpolys);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_nvp_set(self, nvp:int):void")))
void _wrap_rcPolyMesh_nvp_set() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, nvp);
  }
  if (arg1) (arg1)->nvp = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_nvp_get(self):int")))
void _wrap_rcPolyMesh_nvp_get() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->nvp);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_bmin_set(self, bmin:int):void")))
void _wrap_rcPolyMesh_bmin_set() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  float *arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, bmin);
  }
  {
    size_t ii;
    float *b = (float *) arg1->bmin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_bmin_get(self):int")))
void _wrap_rcPolyMesh_bmin_get() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  float *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float *)(float *) ((arg1)->bmin);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_bmax_set(self, bmax:int):void")))
void _wrap_rcPolyMesh_bmax_set() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  float *arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, bmax);
  }
  {
    size_t ii;
    float *b = (float *) arg1->bmax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_bmax_get(self):int")))
void _wrap_rcPolyMesh_bmax_get() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  float *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float *)(float *) ((arg1)->bmax);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_cs_set(self, cs:Number):void")))
void _wrap_rcPolyMesh_cs_set() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, cs);
  }
  if (arg1) (arg1)->cs = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_cs_get(self):Number")))
void _wrap_rcPolyMesh_cs_get() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->cs);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_ch_set(self, ch:Number):void")))
void _wrap_rcPolyMesh_ch_set() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, ch);
  }
  if (arg1) (arg1)->ch = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_ch_get(self):Number")))
void _wrap_rcPolyMesh_ch_get() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->ch);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_borderSize_set(self, borderSize:int):void")))
void _wrap_rcPolyMesh_borderSize_set() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, borderSize);
  }
  if (arg1) (arg1)->borderSize = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMesh_borderSize_get(self):int")))
void _wrap_rcPolyMesh_borderSize_get() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->borderSize);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_new_rcPolyMesh():int")))
void _wrap_new_rcPolyMesh() {
  rcPolyMesh *result ;
  
  result = (rcPolyMesh *)new rcPolyMesh();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_delete_rcPolyMesh(self):void")))
void _wrap_delete_rcPolyMesh() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  delete arg1;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMeshDetail_meshes_set(self, meshes:int):void")))
void _wrap_rcPolyMeshDetail_meshes_set() {
  rcPolyMeshDetail *arg1 = (rcPolyMeshDetail *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, meshes);
  }
  if (arg1) (arg1)->meshes = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMeshDetail_meshes_get(self):int")))
void _wrap_rcPolyMeshDetail_meshes_get() {
  rcPolyMeshDetail *arg1 = (rcPolyMeshDetail *) 0 ;
  unsigned int *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned int *) ((arg1)->meshes);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMeshDetail_verts_set(self, verts:int):void")))
void _wrap_rcPolyMeshDetail_verts_set() {
  rcPolyMeshDetail *arg1 = (rcPolyMeshDetail *) 0 ;
  float *arg2 = (float *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, verts);
  }
  if (arg1) (arg1)->verts = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMeshDetail_verts_get(self):int")))
void _wrap_rcPolyMeshDetail_verts_get() {
  rcPolyMeshDetail *arg1 = (rcPolyMeshDetail *) 0 ;
  float *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float *) ((arg1)->verts);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMeshDetail_tris_set(self, tris:int):void")))
void _wrap_rcPolyMeshDetail_tris_set() {
  rcPolyMeshDetail *arg1 = (rcPolyMeshDetail *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, tris);
  }
  if (arg1) (arg1)->tris = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMeshDetail_tris_get(self):int")))
void _wrap_rcPolyMeshDetail_tris_get() {
  rcPolyMeshDetail *arg1 = (rcPolyMeshDetail *) 0 ;
  unsigned char *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned char *) ((arg1)->tris);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMeshDetail_nmeshes_set(self, nmeshes:int):void")))
void _wrap_rcPolyMeshDetail_nmeshes_set() {
  rcPolyMeshDetail *arg1 = (rcPolyMeshDetail *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, nmeshes);
  }
  if (arg1) (arg1)->nmeshes = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMeshDetail_nmeshes_get(self):int")))
void _wrap_rcPolyMeshDetail_nmeshes_get() {
  rcPolyMeshDetail *arg1 = (rcPolyMeshDetail *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->nmeshes);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMeshDetail_nverts_set(self, nverts:int):void")))
void _wrap_rcPolyMeshDetail_nverts_set() {
  rcPolyMeshDetail *arg1 = (rcPolyMeshDetail *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, nverts);
  }
  if (arg1) (arg1)->nverts = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMeshDetail_nverts_get(self):int")))
void _wrap_rcPolyMeshDetail_nverts_get() {
  rcPolyMeshDetail *arg1 = (rcPolyMeshDetail *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->nverts);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMeshDetail_ntris_set(self, ntris:int):void")))
void _wrap_rcPolyMeshDetail_ntris_set() {
  rcPolyMeshDetail *arg1 = (rcPolyMeshDetail *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, ntris);
  }
  if (arg1) (arg1)->ntris = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcPolyMeshDetail_ntris_get(self):int")))
void _wrap_rcPolyMeshDetail_ntris_get() {
  rcPolyMeshDetail *arg1 = (rcPolyMeshDetail *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->ntris);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_new_rcPolyMeshDetail():int")))
void _wrap_new_rcPolyMeshDetail() {
  rcPolyMeshDetail *result ;
  
  result = (rcPolyMeshDetail *)new rcPolyMeshDetail();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_delete_rcPolyMeshDetail(self):void")))
void _wrap_delete_rcPolyMeshDetail() {
  rcPolyMeshDetail *arg1 = (rcPolyMeshDetail *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  delete arg1;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcAllocHeightfield():int")))
void _wrap_rcAllocHeightfield() {
  rcHeightfield *result ;
  
  result = (rcHeightfield *)rcAllocHeightfield();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcFreeHeightField(hf:int):void")))
void _wrap_rcFreeHeightField() {
  rcHeightfield *arg1 = (rcHeightfield *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, hf);
  }
  rcFreeHeightField(arg1);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcAllocCompactHeightfield():int")))
void _wrap_rcAllocCompactHeightfield() {
  rcCompactHeightfield *result ;
  
  result = (rcCompactHeightfield *)rcAllocCompactHeightfield();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcFreeCompactHeightfield(chf:int):void")))
void _wrap_rcFreeCompactHeightfield() {
  rcCompactHeightfield *arg1 = (rcCompactHeightfield *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, chf);
  }
  rcFreeCompactHeightfield(arg1);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcAllocHeightfieldLayerSet():int")))
void _wrap_rcAllocHeightfieldLayerSet() {
  rcHeightfieldLayerSet *result ;
  
  result = (rcHeightfieldLayerSet *)rcAllocHeightfieldLayerSet();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcFreeHeightfieldLayerSet(lset:int):void")))
void _wrap_rcFreeHeightfieldLayerSet() {
  rcHeightfieldLayerSet *arg1 = (rcHeightfieldLayerSet *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, lset);
  }
  rcFreeHeightfieldLayerSet(arg1);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcAllocContourSet():int")))
void _wrap_rcAllocContourSet() {
  rcContourSet *result ;
  
  result = (rcContourSet *)rcAllocContourSet();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcFreeContourSet(cset:int):void")))
void _wrap_rcFreeContourSet() {
  rcContourSet *arg1 = (rcContourSet *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, cset);
  }
  rcFreeContourSet(arg1);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcAllocPolyMesh():int")))
void _wrap_rcAllocPolyMesh() {
  rcPolyMesh *result ;
  
  result = (rcPolyMesh *)rcAllocPolyMesh();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcFreePolyMesh(pmesh:int):void")))
void _wrap_rcFreePolyMesh() {
  rcPolyMesh *arg1 = (rcPolyMesh *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, pmesh);
  }
  rcFreePolyMesh(arg1);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcAllocPolyMeshDetail():int")))
void _wrap_rcAllocPolyMeshDetail() {
  rcPolyMeshDetail *result ;
  
  result = (rcPolyMeshDetail *)rcAllocPolyMeshDetail();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcFreePolyMeshDetail(dmesh:int):void")))
void _wrap_rcFreePolyMeshDetail() {
  rcPolyMeshDetail *arg1 = (rcPolyMeshDetail *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, dmesh);
  }
  rcFreePolyMeshDetail(arg1);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_BORDER_REG_get():int")))
void _wrap_RC_BORDER_REG_get() {
  unsigned short result ;
  
  result = (unsigned short)(unsigned short)RC_BORDER_REG;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_BORDER_VERTEX_get():int")))
void _wrap_RC_BORDER_VERTEX_get() {
  int result ;
  
  result = (int)(int)RC_BORDER_VERTEX;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_AREA_BORDER_get():int")))
void _wrap_RC_AREA_BORDER_get() {
  int result ;
  
  result = (int)(int)RC_AREA_BORDER;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_CONTOUR_TESS_WALL_EDGES():int")))
void _wrap_RC_CONTOUR_TESS_WALL_EDGES() {
  int result ;
  
  result = RC_CONTOUR_TESS_WALL_EDGES;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_CONTOUR_TESS_AREA_EDGES():int")))
void _wrap_RC_CONTOUR_TESS_AREA_EDGES() {
  int result ;
  
  result = RC_CONTOUR_TESS_AREA_EDGES;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_CONTOUR_REG_MASK_get():int")))
void _wrap_RC_CONTOUR_REG_MASK_get() {
  int result ;
  
  result = (int)(int)RC_CONTOUR_REG_MASK;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_MESH_NULL_IDX_get():int")))
void _wrap_RC_MESH_NULL_IDX_get() {
  unsigned short result ;
  
  result = (unsigned short)(unsigned short)RC_MESH_NULL_IDX;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_NULL_AREA_get():String")))
void _wrap_RC_NULL_AREA_get() {
  unsigned char result ;
  
  result = (unsigned char)(unsigned char)RC_NULL_AREA;
  {
    AS3_DeclareVar(asresult, String);
    AS3_CopyCStringToVar(asresult, &result, 1);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_WALKABLE_AREA_get():String")))
void _wrap_RC_WALKABLE_AREA_get() {
  unsigned char result ;
  
  result = (unsigned char)(unsigned char)RC_WALKABLE_AREA;
  {
    AS3_DeclareVar(asresult, String);
    AS3_CopyCStringToVar(asresult, &result, 1);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_RC_NOT_CONNECTED_get():int")))
void _wrap_RC_NOT_CONNECTED_get() {
  int result ;
  
  result = (int)(int)RC_NOT_CONNECTED;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcSqrt(x:Number):Number")))
void _wrap_rcSqrt() {
  float arg1 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, x);
  }
  result = (float)rcSqrt(arg1);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcVcross(dest:int, v1:int, v2:int):void")))
void _wrap_rcVcross() {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, dest);
  }
  {
    AS3_GetScalarFromVar(arg2, v1);
  }
  {
    AS3_GetScalarFromVar(arg3, v2);
  }
  rcVcross(arg1,(float const *)arg2,(float const *)arg3);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcVdot(v1:int, v2:int):Number")))
void _wrap_rcVdot() {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, v1);
  }
  {
    AS3_GetScalarFromVar(arg2, v2);
  }
  result = (float)rcVdot((float const *)arg1,(float const *)arg2);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcVmad(dest:int, v1:int, v2:int, s:Number):void")))
void _wrap_rcVmad() {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  
  {
    AS3_GetScalarFromVar(arg1, dest);
  }
  {
    AS3_GetScalarFromVar(arg2, v1);
  }
  {
    AS3_GetScalarFromVar(arg3, v2);
  }
  {
    AS3_GetScalarFromVar(arg4, s);
  }
  rcVmad(arg1,(float const *)arg2,(float const *)arg3,arg4);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcVadd(dest:int, v1:int, v2:int):void")))
void _wrap_rcVadd() {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, dest);
  }
  {
    AS3_GetScalarFromVar(arg2, v1);
  }
  {
    AS3_GetScalarFromVar(arg3, v2);
  }
  rcVadd(arg1,(float const *)arg2,(float const *)arg3);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcVsub(dest:int, v1:int, v2:int):void")))
void _wrap_rcVsub() {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, dest);
  }
  {
    AS3_GetScalarFromVar(arg2, v1);
  }
  {
    AS3_GetScalarFromVar(arg3, v2);
  }
  rcVsub(arg1,(float const *)arg2,(float const *)arg3);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcVmin(mn:int, v:int):void")))
void _wrap_rcVmin() {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, mn);
  }
  {
    AS3_GetScalarFromVar(arg2, v);
  }
  rcVmin(arg1,(float const *)arg2);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcVmax(mx:int, v:int):void")))
void _wrap_rcVmax() {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, mx);
  }
  {
    AS3_GetScalarFromVar(arg2, v);
  }
  rcVmax(arg1,(float const *)arg2);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcVcopy(dest:int, v:int):void")))
void _wrap_rcVcopy() {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, dest);
  }
  {
    AS3_GetScalarFromVar(arg2, v);
  }
  rcVcopy(arg1,(float const *)arg2);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcVdist(v1:int, v2:int):Number")))
void _wrap_rcVdist() {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, v1);
  }
  {
    AS3_GetScalarFromVar(arg2, v2);
  }
  result = (float)rcVdist((float const *)arg1,(float const *)arg2);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcVdistSqr(v1:int, v2:int):Number")))
void _wrap_rcVdistSqr() {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, v1);
  }
  {
    AS3_GetScalarFromVar(arg2, v2);
  }
  result = (float)rcVdistSqr((float const *)arg1,(float const *)arg2);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcVnormalize(v:int):void")))
void _wrap_rcVnormalize() {
  float *arg1 = (float *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, v);
  }
  rcVnormalize(arg1);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCalcBounds(verts:int, nv:int, bmin:int, bmax:int):void")))
void _wrap_rcCalcBounds() {
  float *arg1 = (float *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, verts);
  }
  {
    AS3_GetScalarFromVar(arg2, nv);
  }
  {
    AS3_GetScalarFromVar(arg3, bmin);
  }
  {
    AS3_GetScalarFromVar(arg4, bmax);
  }
  rcCalcBounds((float const *)arg1,arg2,arg3,arg4);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCalcGridSize(bmin:int, bmax:int, cs:Number, w:int, h:int):void")))
void _wrap_rcCalcGridSize() {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, bmin);
  }
  {
    AS3_GetScalarFromVar(arg2, bmax);
  }
  {
    AS3_GetScalarFromVar(arg3, cs);
  }
  {
    AS3_GetScalarFromVar(arg4, w);
  }
  {
    AS3_GetScalarFromVar(arg5, h);
  }
  rcCalcGridSize((float const *)arg1,(float const *)arg2,arg3,arg4,arg5);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCreateHeightfield(ctx:int, hf:int, width:int, height:int, bmin:int, bmax:int, cs:Number, ch:Number):Boolean")))
void _wrap_rcCreateHeightfield() {
  rcContext *arg1 = (rcContext *) 0 ;
  rcHeightfield *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  float arg7 ;
  float arg8 ;
  bool result ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, hf);
  }
  {
    AS3_GetScalarFromVar(arg3, width);
  }
  {
    AS3_GetScalarFromVar(arg4, height);
  }
  {
    AS3_GetScalarFromVar(arg5, bmin);
  }
  {
    AS3_GetScalarFromVar(arg6, bmax);
  }
  {
    AS3_GetScalarFromVar(arg7, cs);
  }
  {
    AS3_GetScalarFromVar(arg8, ch);
  }
  result = (bool)rcCreateHeightfield(arg1,*arg2,arg3,arg4,(float const *)arg5,(float const *)arg6,arg7,arg8);
  {
    AS3_DeclareVar(asresult, Boolean);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcMarkWalkableTriangles(ctx:int, walkableSlopeAngle:Number, verts:int, nv:int, tris:int, nt:int, areas:int):void")))
void _wrap_rcMarkWalkableTriangles() {
  rcContext *arg1 = (rcContext *) 0 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  unsigned char *arg7 = (unsigned char *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, walkableSlopeAngle);
  }
  {
    AS3_GetScalarFromVar(arg3, verts);
  }
  {
    AS3_GetScalarFromVar(arg4, nv);
  }
  {
    AS3_GetScalarFromVar(arg5, tris);
  }
  {
    AS3_GetScalarFromVar(arg6, nt);
  }
  {
    AS3_GetScalarFromVar(arg7, areas);
  }
  rcMarkWalkableTriangles(arg1,arg2,(float const *)arg3,arg4,(int const *)arg5,arg6,arg7);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcClearUnwalkableTriangles(ctx:int, walkableSlopeAngle:Number, verts:int, nv:int, tris:int, nt:int, areas:int):void")))
void _wrap_rcClearUnwalkableTriangles() {
  rcContext *arg1 = (rcContext *) 0 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  unsigned char *arg7 = (unsigned char *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, walkableSlopeAngle);
  }
  {
    AS3_GetScalarFromVar(arg3, verts);
  }
  {
    AS3_GetScalarFromVar(arg4, nv);
  }
  {
    AS3_GetScalarFromVar(arg5, tris);
  }
  {
    AS3_GetScalarFromVar(arg6, nt);
  }
  {
    AS3_GetScalarFromVar(arg7, areas);
  }
  rcClearUnwalkableTriangles(arg1,arg2,(float const *)arg3,arg4,(int const *)arg5,arg6,arg7);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcAddSpan(ctx:int, hf:int, x:int, y:int, smin:int, smax:int, area:String, flagMergeThr:int):void")))
void _wrap_rcAddSpan() {
  rcContext *arg1 = (rcContext *) 0 ;
  rcHeightfield *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  unsigned short arg5 ;
  unsigned short arg6 ;
  unsigned char arg7 ;
  int arg8 ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, hf);
  }
  {
    AS3_GetScalarFromVar(arg3, x);
  }
  {
    AS3_GetScalarFromVar(arg4, y);
  }
  {
    AS3_GetScalarFromVar(arg5, smin);
  }
  {
    AS3_GetScalarFromVar(arg6, smax);
  }
  {
    inline_nonreentrant_as3(
      "%0 = area.charCodeAt(0)" : "=r"(arg7)
      );
  }
  {
    AS3_GetScalarFromVar(arg8, flagMergeThr);
  }
  rcAddSpan(arg1,*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcRasterizeTriangle(ctx:int, v0:int, v1:int, v2:int, area:String, solid:int, flagMergeThr:int):void")))
void _wrap_rcRasterizeTriangle() {
  rcContext *arg1 = (rcContext *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  unsigned char arg5 ;
  rcHeightfield *arg6 = 0 ;
  int arg7 ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, v0);
  }
  {
    AS3_GetScalarFromVar(arg3, v1);
  }
  {
    AS3_GetScalarFromVar(arg4, v2);
  }
  {
    inline_nonreentrant_as3(
      "%0 = area.charCodeAt(0)" : "=r"(arg5)
      );
  }
  {
    AS3_GetScalarFromVar(arg6, solid);
  }
  {
    AS3_GetScalarFromVar(arg7, flagMergeThr);
  }
  rcRasterizeTriangle(arg1,(float const *)arg2,(float const *)arg3,(float const *)arg4,arg5,*arg6,arg7);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcRasterizeTriangles(ctx:int, verts:int, nv:int, tris:int, areas:int, nt:int, solid:int, flagMergeThr:int):void")))
void _wrap_rcRasterizeTriangles() {
  rcContext *arg1 = (rcContext *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  int arg6 ;
  rcHeightfield *arg7 = 0 ;
  int arg8 ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, verts);
  }
  {
    AS3_GetScalarFromVar(arg3, nv);
  }
  {
    AS3_GetScalarFromVar(arg4, tris);
  }
  {
    AS3_GetScalarFromVar(arg5, areas);
  }
  {
    AS3_GetScalarFromVar(arg6, nt);
  }
  {
    AS3_GetScalarFromVar(arg7, solid);
  }
  {
    AS3_GetScalarFromVar(arg8, flagMergeThr);
  }
  rcRasterizeTriangles(arg1,(float const *)arg2,arg3,(int const *)arg4,(unsigned char const *)arg5,arg6,*arg7,arg8);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcFilterLowHangingWalkableObstacles(ctx:int, walkableClimb:int, solid:int):void")))
void _wrap_rcFilterLowHangingWalkableObstacles() {
  rcContext *arg1 = (rcContext *) 0 ;
  int arg2 ;
  rcHeightfield *arg3 = 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, walkableClimb);
  }
  {
    AS3_GetScalarFromVar(arg3, solid);
  }
  rcFilterLowHangingWalkableObstacles(arg1,arg2,*arg3);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcFilterLedgeSpans(ctx:int, walkableHeight:int, walkableClimb:int, solid:int):void")))
void _wrap_rcFilterLedgeSpans() {
  rcContext *arg1 = (rcContext *) 0 ;
  int arg2 ;
  int arg3 ;
  rcHeightfield *arg4 = 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, walkableHeight);
  }
  {
    AS3_GetScalarFromVar(arg3, walkableClimb);
  }
  {
    AS3_GetScalarFromVar(arg4, solid);
  }
  rcFilterLedgeSpans(arg1,arg2,arg3,*arg4);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcFilterWalkableLowHeightSpans(ctx:int, walkableHeight:int, solid:int):void")))
void _wrap_rcFilterWalkableLowHeightSpans() {
  rcContext *arg1 = (rcContext *) 0 ;
  int arg2 ;
  rcHeightfield *arg3 = 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, walkableHeight);
  }
  {
    AS3_GetScalarFromVar(arg3, solid);
  }
  rcFilterWalkableLowHeightSpans(arg1,arg2,*arg3);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcGetHeightFieldSpanCount(ctx:int, hf:int):int")))
void _wrap_rcGetHeightFieldSpanCount() {
  rcContext *arg1 = (rcContext *) 0 ;
  rcHeightfield *arg2 = 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, hf);
  }
  result = (int)rcGetHeightFieldSpanCount(arg1,*arg2);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcBuildCompactHeightfield(ctx:int, walkableHeight:int, walkableClimb:int, hf:int, chf:int):Boolean")))
void _wrap_rcBuildCompactHeightfield() {
  rcContext *arg1 = (rcContext *) 0 ;
  int arg2 ;
  int arg3 ;
  rcHeightfield *arg4 = 0 ;
  rcCompactHeightfield *arg5 = 0 ;
  bool result ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, walkableHeight);
  }
  {
    AS3_GetScalarFromVar(arg3, walkableClimb);
  }
  {
    AS3_GetScalarFromVar(arg4, hf);
  }
  {
    AS3_GetScalarFromVar(arg5, chf);
  }
  result = (bool)rcBuildCompactHeightfield(arg1,arg2,arg3,*arg4,*arg5);
  {
    AS3_DeclareVar(asresult, Boolean);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcErodeWalkableArea(ctx:int, radius:int, chf:int):Boolean")))
void _wrap_rcErodeWalkableArea() {
  rcContext *arg1 = (rcContext *) 0 ;
  int arg2 ;
  rcCompactHeightfield *arg3 = 0 ;
  bool result ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, radius);
  }
  {
    AS3_GetScalarFromVar(arg3, chf);
  }
  result = (bool)rcErodeWalkableArea(arg1,arg2,*arg3);
  {
    AS3_DeclareVar(asresult, Boolean);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcMedianFilterWalkableArea(ctx:int, chf:int):Boolean")))
void _wrap_rcMedianFilterWalkableArea() {
  rcContext *arg1 = (rcContext *) 0 ;
  rcCompactHeightfield *arg2 = 0 ;
  bool result ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, chf);
  }
  result = (bool)rcMedianFilterWalkableArea(arg1,*arg2);
  {
    AS3_DeclareVar(asresult, Boolean);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcMarkBoxArea(ctx:int, bmin:int, bmax:int, areaId:String, chf:int):void")))
void _wrap_rcMarkBoxArea() {
  rcContext *arg1 = (rcContext *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned char arg4 ;
  rcCompactHeightfield *arg5 = 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, bmin);
  }
  {
    AS3_GetScalarFromVar(arg3, bmax);
  }
  {
    inline_nonreentrant_as3(
      "%0 = areaId.charCodeAt(0)" : "=r"(arg4)
      );
  }
  {
    AS3_GetScalarFromVar(arg5, chf);
  }
  rcMarkBoxArea(arg1,(float const *)arg2,(float const *)arg3,arg4,*arg5);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcMarkConvexPolyArea(ctx:int, verts:int, nverts:int, hmin:Number, hmax:Number, areaId:String, chf:int):void")))
void _wrap_rcMarkConvexPolyArea() {
  rcContext *arg1 = (rcContext *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  unsigned char arg6 ;
  rcCompactHeightfield *arg7 = 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, verts);
  }
  {
    AS3_GetScalarFromVar(arg3, nverts);
  }
  {
    AS3_GetScalarFromVar(arg4, hmin);
  }
  {
    AS3_GetScalarFromVar(arg5, hmax);
  }
  {
    inline_nonreentrant_as3(
      "%0 = areaId.charCodeAt(0)" : "=r"(arg6)
      );
  }
  {
    AS3_GetScalarFromVar(arg7, chf);
  }
  rcMarkConvexPolyArea(arg1,(float const *)arg2,arg3,arg4,arg5,arg6,*arg7);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcOffsetPoly(verts:int, nverts:int, offset:Number, outVerts:int, maxOutVerts:int):int")))
void _wrap_rcOffsetPoly() {
  float *arg1 = (float *) 0 ;
  int arg2 ;
  float arg3 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, verts);
  }
  {
    AS3_GetScalarFromVar(arg2, nverts);
  }
  {
    AS3_GetScalarFromVar(arg3, offset);
  }
  {
    AS3_GetScalarFromVar(arg4, outVerts);
  }
  {
    AS3_GetScalarFromVar(arg5, maxOutVerts);
  }
  result = (int)rcOffsetPoly((float const *)arg1,arg2,arg3,arg4,arg5);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcMarkCylinderArea(ctx:int, pos:int, r:Number, h:Number, areaId:String, chf:int):void")))
void _wrap_rcMarkCylinderArea() {
  rcContext *arg1 = (rcContext *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  unsigned char arg5 ;
  rcCompactHeightfield *arg6 = 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, pos);
  }
  {
    AS3_GetScalarFromVar(arg3, r);
  }
  {
    AS3_GetScalarFromVar(arg4, h);
  }
  {
    inline_nonreentrant_as3(
      "%0 = areaId.charCodeAt(0)" : "=r"(arg5)
      );
  }
  {
    AS3_GetScalarFromVar(arg6, chf);
  }
  rcMarkCylinderArea(arg1,(float const *)arg2,arg3,arg4,arg5,*arg6);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcBuildDistanceField(ctx:int, chf:int):Boolean")))
void _wrap_rcBuildDistanceField() {
  rcContext *arg1 = (rcContext *) 0 ;
  rcCompactHeightfield *arg2 = 0 ;
  bool result ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, chf);
  }
  result = (bool)rcBuildDistanceField(arg1,*arg2);
  {
    AS3_DeclareVar(asresult, Boolean);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcBuildRegions(ctx:int, chf:int, borderSize:int, minRegionArea:int, mergeRegionArea:int):Boolean")))
void _wrap_rcBuildRegions() {
  rcContext *arg1 = (rcContext *) 0 ;
  rcCompactHeightfield *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, chf);
  }
  {
    AS3_GetScalarFromVar(arg3, borderSize);
  }
  {
    AS3_GetScalarFromVar(arg4, minRegionArea);
  }
  {
    AS3_GetScalarFromVar(arg5, mergeRegionArea);
  }
  result = (bool)rcBuildRegions(arg1,*arg2,arg3,arg4,arg5);
  {
    AS3_DeclareVar(asresult, Boolean);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcBuildRegionsMonotone(ctx:int, chf:int, borderSize:int, minRegionArea:int, mergeRegionArea:int):Boolean")))
void _wrap_rcBuildRegionsMonotone() {
  rcContext *arg1 = (rcContext *) 0 ;
  rcCompactHeightfield *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, chf);
  }
  {
    AS3_GetScalarFromVar(arg3, borderSize);
  }
  {
    AS3_GetScalarFromVar(arg4, minRegionArea);
  }
  {
    AS3_GetScalarFromVar(arg5, mergeRegionArea);
  }
  result = (bool)rcBuildRegionsMonotone(arg1,*arg2,arg3,arg4,arg5);
  {
    AS3_DeclareVar(asresult, Boolean);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcSetCon(s:int, dir:int, i:int):void")))
void _wrap_rcSetCon() {
  rcCompactSpan *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  
  {
    AS3_GetScalarFromVar(arg1, s);
  }
  {
    AS3_GetScalarFromVar(arg2, dir);
  }
  {
    AS3_GetScalarFromVar(arg3, i);
  }
  rcSetCon(*arg1,arg2,arg3);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcGetCon(s:int, dir:int):int")))
void _wrap_rcGetCon() {
  rcCompactSpan *arg1 = 0 ;
  int arg2 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, s);
  }
  {
    AS3_GetScalarFromVar(arg2, dir);
  }
  result = (int)rcGetCon((rcCompactSpan const &)*arg1,arg2);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcGetDirOffsetX(dir:int):int")))
void _wrap_rcGetDirOffsetX() {
  int arg1 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, dir);
  }
  result = (int)rcGetDirOffsetX(arg1);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcGetDirOffsetY(dir:int):int")))
void _wrap_rcGetDirOffsetY() {
  int arg1 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, dir);
  }
  result = (int)rcGetDirOffsetY(arg1);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcBuildHeightfieldLayers(ctx:int, chf:int, borderSize:int, walkableHeight:int, lset:int):Boolean")))
void _wrap_rcBuildHeightfieldLayers() {
  rcContext *arg1 = (rcContext *) 0 ;
  rcCompactHeightfield *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  rcHeightfieldLayerSet *arg5 = 0 ;
  bool result ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, chf);
  }
  {
    AS3_GetScalarFromVar(arg3, borderSize);
  }
  {
    AS3_GetScalarFromVar(arg4, walkableHeight);
  }
  {
    AS3_GetScalarFromVar(arg5, lset);
  }
  result = (bool)rcBuildHeightfieldLayers(arg1,*arg2,arg3,arg4,*arg5);
  {
    AS3_DeclareVar(asresult, Boolean);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcBuildContours(ctx:int, chf:int, maxError:Number, maxEdgeLen:int, cset:int, flags:int):Boolean")))
void _wrap_rcBuildContours() {
  rcContext *arg1 = (rcContext *) 0 ;
  rcCompactHeightfield *arg2 = 0 ;
  float arg3 ;
  int arg4 ;
  rcContourSet *arg5 = 0 ;
  int arg6 ;
  bool result ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, chf);
  }
  {
    AS3_GetScalarFromVar(arg3, maxError);
  }
  {
    AS3_GetScalarFromVar(arg4, maxEdgeLen);
  }
  {
    AS3_GetScalarFromVar(arg5, cset);
  }
  {
    AS3_GetScalarFromVar(arg6, flags);
  }
  result = (bool)rcBuildContours(arg1,*arg2,arg3,arg4,*arg5,arg6);
  {
    AS3_DeclareVar(asresult, Boolean);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcBuildPolyMesh(ctx:int, cset:int, nvp:int, mesh:int):Boolean")))
void _wrap_rcBuildPolyMesh() {
  rcContext *arg1 = (rcContext *) 0 ;
  rcContourSet *arg2 = 0 ;
  int arg3 ;
  rcPolyMesh *arg4 = 0 ;
  bool result ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, cset);
  }
  {
    AS3_GetScalarFromVar(arg3, nvp);
  }
  {
    AS3_GetScalarFromVar(arg4, mesh);
  }
  result = (bool)rcBuildPolyMesh(arg1,*arg2,arg3,*arg4);
  {
    AS3_DeclareVar(asresult, Boolean);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcMergePolyMeshes(ctx:int, meshes:int, nmeshes:int, mesh:int):Boolean")))
void _wrap_rcMergePolyMeshes() {
  rcContext *arg1 = (rcContext *) 0 ;
  rcPolyMesh **arg2 = (rcPolyMesh **) 0 ;
  int arg3 ;
  rcPolyMesh *arg4 = 0 ;
  bool result ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, meshes);
  }
  {
    AS3_GetScalarFromVar(arg3, nmeshes);
  }
  {
    AS3_GetScalarFromVar(arg4, mesh);
  }
  result = (bool)rcMergePolyMeshes(arg1,arg2,arg3,*arg4);
  {
    AS3_DeclareVar(asresult, Boolean);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcBuildPolyMeshDetail(ctx:int, mesh:int, chf:int, sampleDist:Number, sampleMaxError:Number, dmesh:int):Boolean")))
void _wrap_rcBuildPolyMeshDetail() {
  rcContext *arg1 = (rcContext *) 0 ;
  rcPolyMesh *arg2 = 0 ;
  rcCompactHeightfield *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  rcPolyMeshDetail *arg6 = 0 ;
  bool result ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, mesh);
  }
  {
    AS3_GetScalarFromVar(arg3, chf);
  }
  {
    AS3_GetScalarFromVar(arg4, sampleDist);
  }
  {
    AS3_GetScalarFromVar(arg5, sampleMaxError);
  }
  {
    AS3_GetScalarFromVar(arg6, dmesh);
  }
  result = (bool)rcBuildPolyMeshDetail(arg1,(rcPolyMesh const &)*arg2,(rcCompactHeightfield const &)*arg3,arg4,arg5,*arg6);
  {
    AS3_DeclareVar(asresult, Boolean);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcCopyPolyMesh(ctx:int, src:int, dst:int):Boolean")))
void _wrap_rcCopyPolyMesh() {
  rcContext *arg1 = (rcContext *) 0 ;
  rcPolyMesh *arg2 = 0 ;
  rcPolyMesh *arg3 = 0 ;
  bool result ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, src);
  }
  {
    AS3_GetScalarFromVar(arg3, dst);
  }
  result = (bool)rcCopyPolyMesh(arg1,(rcPolyMesh const &)*arg2,*arg3);
  {
    AS3_DeclareVar(asresult, Boolean);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_rcMergePolyMeshDetails(ctx:int, meshes:int, nmeshes:int, mesh:int):Boolean")))
void _wrap_rcMergePolyMeshDetails() {
  rcContext *arg1 = (rcContext *) 0 ;
  rcPolyMeshDetail **arg2 = (rcPolyMeshDetail **) 0 ;
  int arg3 ;
  rcPolyMeshDetail *arg4 = 0 ;
  bool result ;
  
  {
    AS3_GetScalarFromVar(arg1, ctx);
  }
  {
    AS3_GetScalarFromVar(arg2, meshes);
  }
  {
    AS3_GetScalarFromVar(arg3, nmeshes);
  }
  {
    AS3_GetScalarFromVar(arg4, mesh);
  }
  result = (bool)rcMergePolyMeshDetails(arg1,arg2,arg3,*arg4);
  {
    AS3_DeclareVar(asresult, Boolean);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_new_AS3_rcContext():int")))
void _wrap_new_AS3_rcContext() {
  AS3_rcContext *result ;
  
  result = (AS3_rcContext *)new AS3_rcContext();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_delete_AS3_rcContext(self):void")))
void _wrap_delete_AS3_rcContext() {
  AS3_rcContext *arg1 = (AS3_rcContext *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  delete arg1;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_SAMPLE_POLYAREA_GROUND():int")))
void _wrap_SAMPLE_POLYAREA_GROUND() {
  int result ;
  
  result = SAMPLE_POLYAREA_GROUND;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_SAMPLE_POLYAREA_WATER():int")))
void _wrap_SAMPLE_POLYAREA_WATER() {
  int result ;
  
  result = SAMPLE_POLYAREA_WATER;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_SAMPLE_POLYAREA_ROAD():int")))
void _wrap_SAMPLE_POLYAREA_ROAD() {
  int result ;
  
  result = SAMPLE_POLYAREA_ROAD;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_SAMPLE_POLYAREA_DOOR():int")))
void _wrap_SAMPLE_POLYAREA_DOOR() {
  int result ;
  
  result = SAMPLE_POLYAREA_DOOR;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_SAMPLE_POLYAREA_GRASS():int")))
void _wrap_SAMPLE_POLYAREA_GRASS() {
  int result ;
  
  result = SAMPLE_POLYAREA_GRASS;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_SAMPLE_POLYAREA_JUMP():int")))
void _wrap_SAMPLE_POLYAREA_JUMP() {
  int result ;
  
  result = SAMPLE_POLYAREA_JUMP;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_SAMPLE_POLYFLAGS_WALK():int")))
void _wrap_SAMPLE_POLYFLAGS_WALK() {
  int result ;
  
  result = SAMPLE_POLYFLAGS_WALK;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_SAMPLE_POLYFLAGS_SWIM():int")))
void _wrap_SAMPLE_POLYFLAGS_SWIM() {
  int result ;
  
  result = SAMPLE_POLYFLAGS_SWIM;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_SAMPLE_POLYFLAGS_DOOR():int")))
void _wrap_SAMPLE_POLYFLAGS_DOOR() {
  int result ;
  
  result = SAMPLE_POLYFLAGS_DOOR;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_SAMPLE_POLYFLAGS_JUMP():int")))
void _wrap_SAMPLE_POLYFLAGS_JUMP() {
  int result ;
  
  result = SAMPLE_POLYFLAGS_JUMP;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_SAMPLE_POLYFLAGS_DISABLED():int")))
void _wrap_SAMPLE_POLYFLAGS_DISABLED() {
  int result ;
  
  result = SAMPLE_POLYFLAGS_DISABLED;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_SAMPLE_POLYFLAGS_ALL():int")))
void _wrap_SAMPLE_POLYFLAGS_ALL() {
  int result ;
  
  result = SAMPLE_POLYFLAGS_ALL;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_cellSize_set(self, m_cellSize:Number):void")))
void _wrap_Sample_m_cellSize_set() {
  Sample *arg1 = (Sample *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, m_cellSize);
  }
  if (arg1) (arg1)->m_cellSize = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_cellSize_get(self):Number")))
void _wrap_Sample_m_cellSize_get() {
  Sample *arg1 = (Sample *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->m_cellSize);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_cellHeight_set(self, m_cellHeight:Number):void")))
void _wrap_Sample_m_cellHeight_set() {
  Sample *arg1 = (Sample *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, m_cellHeight);
  }
  if (arg1) (arg1)->m_cellHeight = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_cellHeight_get(self):Number")))
void _wrap_Sample_m_cellHeight_get() {
  Sample *arg1 = (Sample *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->m_cellHeight);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_agentHeight_set(self, m_agentHeight:Number):void")))
void _wrap_Sample_m_agentHeight_set() {
  Sample *arg1 = (Sample *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, m_agentHeight);
  }
  if (arg1) (arg1)->m_agentHeight = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_agentHeight_get(self):Number")))
void _wrap_Sample_m_agentHeight_get() {
  Sample *arg1 = (Sample *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->m_agentHeight);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_agentRadius_set(self, m_agentRadius:Number):void")))
void _wrap_Sample_m_agentRadius_set() {
  Sample *arg1 = (Sample *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, m_agentRadius);
  }
  if (arg1) (arg1)->m_agentRadius = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_agentRadius_get(self):Number")))
void _wrap_Sample_m_agentRadius_get() {
  Sample *arg1 = (Sample *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->m_agentRadius);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_agentMaxClimb_set(self, m_agentMaxClimb:Number):void")))
void _wrap_Sample_m_agentMaxClimb_set() {
  Sample *arg1 = (Sample *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, m_agentMaxClimb);
  }
  if (arg1) (arg1)->m_agentMaxClimb = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_agentMaxClimb_get(self):Number")))
void _wrap_Sample_m_agentMaxClimb_get() {
  Sample *arg1 = (Sample *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->m_agentMaxClimb);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_agentMaxSlope_set(self, m_agentMaxSlope:Number):void")))
void _wrap_Sample_m_agentMaxSlope_set() {
  Sample *arg1 = (Sample *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, m_agentMaxSlope);
  }
  if (arg1) (arg1)->m_agentMaxSlope = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_agentMaxSlope_get(self):Number")))
void _wrap_Sample_m_agentMaxSlope_get() {
  Sample *arg1 = (Sample *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->m_agentMaxSlope);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_regionMinSize_set(self, m_regionMinSize:Number):void")))
void _wrap_Sample_m_regionMinSize_set() {
  Sample *arg1 = (Sample *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, m_regionMinSize);
  }
  if (arg1) (arg1)->m_regionMinSize = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_regionMinSize_get(self):Number")))
void _wrap_Sample_m_regionMinSize_get() {
  Sample *arg1 = (Sample *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->m_regionMinSize);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_regionMergeSize_set(self, m_regionMergeSize:Number):void")))
void _wrap_Sample_m_regionMergeSize_set() {
  Sample *arg1 = (Sample *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, m_regionMergeSize);
  }
  if (arg1) (arg1)->m_regionMergeSize = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_regionMergeSize_get(self):Number")))
void _wrap_Sample_m_regionMergeSize_get() {
  Sample *arg1 = (Sample *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->m_regionMergeSize);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_monotonePartitioning_set(self, m_monotonePartitioning:Boolean):void")))
void _wrap_Sample_m_monotonePartitioning_set() {
  Sample *arg1 = (Sample *) 0 ;
  bool arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, m_monotonePartitioning);
  }
  if (arg1) (arg1)->m_monotonePartitioning = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_monotonePartitioning_get(self):Boolean")))
void _wrap_Sample_m_monotonePartitioning_get() {
  Sample *arg1 = (Sample *) 0 ;
  bool result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (bool) ((arg1)->m_monotonePartitioning);
  {
    AS3_DeclareVar(asresult, Boolean);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_edgeMaxLen_set(self, m_edgeMaxLen:Number):void")))
void _wrap_Sample_m_edgeMaxLen_set() {
  Sample *arg1 = (Sample *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, m_edgeMaxLen);
  }
  if (arg1) (arg1)->m_edgeMaxLen = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_edgeMaxLen_get(self):Number")))
void _wrap_Sample_m_edgeMaxLen_get() {
  Sample *arg1 = (Sample *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->m_edgeMaxLen);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_edgeMaxError_set(self, m_edgeMaxError:Number):void")))
void _wrap_Sample_m_edgeMaxError_set() {
  Sample *arg1 = (Sample *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, m_edgeMaxError);
  }
  if (arg1) (arg1)->m_edgeMaxError = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_edgeMaxError_get(self):Number")))
void _wrap_Sample_m_edgeMaxError_get() {
  Sample *arg1 = (Sample *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->m_edgeMaxError);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_vertsPerPoly_set(self, m_vertsPerPoly:Number):void")))
void _wrap_Sample_m_vertsPerPoly_set() {
  Sample *arg1 = (Sample *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, m_vertsPerPoly);
  }
  if (arg1) (arg1)->m_vertsPerPoly = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_vertsPerPoly_get(self):Number")))
void _wrap_Sample_m_vertsPerPoly_get() {
  Sample *arg1 = (Sample *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->m_vertsPerPoly);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_detailSampleDist_set(self, m_detailSampleDist:Number):void")))
void _wrap_Sample_m_detailSampleDist_set() {
  Sample *arg1 = (Sample *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, m_detailSampleDist);
  }
  if (arg1) (arg1)->m_detailSampleDist = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_detailSampleDist_get(self):Number")))
void _wrap_Sample_m_detailSampleDist_get() {
  Sample *arg1 = (Sample *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->m_detailSampleDist);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_detailSampleMaxError_set(self, m_detailSampleMaxError:Number):void")))
void _wrap_Sample_m_detailSampleMaxError_set() {
  Sample *arg1 = (Sample *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, m_detailSampleMaxError);
  }
  if (arg1) (arg1)->m_detailSampleMaxError = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_m_detailSampleMaxError_get(self):Number")))
void _wrap_Sample_m_detailSampleMaxError_get() {
  Sample *arg1 = (Sample *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->m_detailSampleMaxError);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_delete_Sample(self):void")))
void _wrap_delete_Sample() {
  Sample *arg1 = (Sample *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  delete arg1;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_handleSettings(self):void")))
void _wrap_Sample_handleSettings() {
  Sample *arg1 = (Sample *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  (arg1)->handleSettings();
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_handleStep(self):void")))
void _wrap_Sample_handleStep() {
  Sample *arg1 = (Sample *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  (arg1)->handleStep();
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_handleMeshChanged(self, geom:int):void")))
void _wrap_Sample_handleMeshChanged() {
  Sample *arg1 = (Sample *) 0 ;
  InputGeom *arg2 = (InputGeom *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, geom);
  }
  (arg1)->handleMeshChanged(arg2);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_handleBuild(self):Boolean")))
void _wrap_Sample_handleBuild() {
  Sample *arg1 = (Sample *) 0 ;
  bool result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (bool)(arg1)->handleBuild();
  {
    AS3_DeclareVar(asresult, Boolean);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_handleUpdate(self, dt:Number):void")))
void _wrap_Sample_handleUpdate() {
  Sample *arg1 = (Sample *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, dt);
  }
  (arg1)->handleUpdate(arg2);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_setContext(self, ctx:int):void")))
void _wrap_Sample_setContext() {
  Sample *arg1 = (Sample *) 0 ;
  rcContext *arg2 = (rcContext *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, ctx);
  }
  (arg1)->setContext(arg2);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_getInputGeom(self):int")))
void _wrap_Sample_getInputGeom() {
  Sample *arg1 = (Sample *) 0 ;
  InputGeom *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (InputGeom *)(arg1)->getInputGeom();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_getNavMesh(self):int")))
void _wrap_Sample_getNavMesh() {
  Sample *arg1 = (Sample *) 0 ;
  dtNavMesh *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (dtNavMesh *)(arg1)->getNavMesh();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_getNavMeshQuery(self):int")))
void _wrap_Sample_getNavMeshQuery() {
  Sample *arg1 = (Sample *) 0 ;
  dtNavMeshQuery *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (dtNavMeshQuery *)(arg1)->getNavMeshQuery();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_getCrowd(self):int")))
void _wrap_Sample_getCrowd() {
  Sample *arg1 = (Sample *) 0 ;
  dtCrowd *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (dtCrowd *)(arg1)->getCrowd();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_getAgentRadius(self):Number")))
void _wrap_Sample_getAgentRadius() {
  Sample *arg1 = (Sample *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float)(arg1)->getAgentRadius();
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_getAgentHeight(self):Number")))
void _wrap_Sample_getAgentHeight() {
  Sample *arg1 = (Sample *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float)(arg1)->getAgentHeight();
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_getAgentClimb(self):Number")))
void _wrap_Sample_getAgentClimb() {
  Sample *arg1 = (Sample *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float)(arg1)->getAgentClimb();
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_getBoundsMin(self):int")))
void _wrap_Sample_getBoundsMin() {
  Sample *arg1 = (Sample *) 0 ;
  float *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float *)(arg1)->getBoundsMin();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_getBoundsMax(self):int")))
void _wrap_Sample_getBoundsMax() {
  Sample *arg1 = (Sample *) 0 ;
  float *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float *)(arg1)->getBoundsMax();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_delete_Sample_TempObstacles(self):void")))
void _wrap_delete_Sample_TempObstacles() {
  Sample_TempObstacles *arg1 = (Sample_TempObstacles *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  delete arg1;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_TempObstacles_handleSettings(self):void")))
void _wrap_Sample_TempObstacles_handleSettings() {
  Sample_TempObstacles *arg1 = (Sample_TempObstacles *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  (arg1)->handleSettings();
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_TempObstacles_handleMeshChanged(self, geom:int):void")))
void _wrap_Sample_TempObstacles_handleMeshChanged() {
  Sample_TempObstacles *arg1 = (Sample_TempObstacles *) 0 ;
  InputGeom *arg2 = (InputGeom *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, geom);
  }
  (arg1)->handleMeshChanged(arg2);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_TempObstacles_handleBuild(self):Boolean")))
void _wrap_Sample_TempObstacles_handleBuild() {
  Sample_TempObstacles *arg1 = (Sample_TempObstacles *) 0 ;
  bool result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (bool)(arg1)->handleBuild();
  {
    AS3_DeclareVar(asresult, Boolean);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_TempObstacles_handleUpdate(self, dt:Number):void")))
void _wrap_Sample_TempObstacles_handleUpdate() {
  Sample_TempObstacles *arg1 = (Sample_TempObstacles *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, dt);
  }
  (arg1)->handleUpdate(arg2);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_TempObstacles_m_tileSize_set(self, m_tileSize:Number):void")))
void _wrap_Sample_TempObstacles_m_tileSize_set() {
  Sample_TempObstacles *arg1 = (Sample_TempObstacles *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, m_tileSize);
  }
  if (arg1) (arg1)->m_tileSize = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_TempObstacles_m_tileSize_get(self):Number")))
void _wrap_Sample_TempObstacles_m_tileSize_get() {
  Sample_TempObstacles *arg1 = (Sample_TempObstacles *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->m_tileSize);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_TempObstacles_m_maxObstacles_set(self, m_maxObstacles:Number):void")))
void _wrap_Sample_TempObstacles_m_maxObstacles_set() {
  Sample_TempObstacles *arg1 = (Sample_TempObstacles *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, m_maxObstacles);
  }
  if (arg1) (arg1)->m_maxObstacles = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_Sample_TempObstacles_m_maxObstacles_get(self):Number")))
void _wrap_Sample_TempObstacles_m_maxObstacles_get() {
  Sample_TempObstacles *arg1 = (Sample_TempObstacles *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->m_maxObstacles);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_MAX_CONVEXVOL_PTS_get():int")))
void _wrap_MAX_CONVEXVOL_PTS_get() {
  int result ;
  
  result = (int)(int)MAX_CONVEXVOL_PTS;
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_ConvexVolume_verts_set(self, verts:int):void")))
void _wrap_ConvexVolume_verts_set() {
  ConvexVolume *arg1 = (ConvexVolume *) 0 ;
  float *arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, verts);
  }
  {
    size_t ii;
    float *b = (float *) arg1->verts;
    for (ii = 0; ii < (size_t)MAX_CONVEXVOL_PTS*3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_ConvexVolume_verts_get(self):int")))
void _wrap_ConvexVolume_verts_get() {
  ConvexVolume *arg1 = (ConvexVolume *) 0 ;
  float *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float *)(float *) ((arg1)->verts);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_ConvexVolume_hmin_set(self, hmin:Number):void")))
void _wrap_ConvexVolume_hmin_set() {
  ConvexVolume *arg1 = (ConvexVolume *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, hmin);
  }
  if (arg1) (arg1)->hmin = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_ConvexVolume_hmin_get(self):Number")))
void _wrap_ConvexVolume_hmin_get() {
  ConvexVolume *arg1 = (ConvexVolume *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->hmin);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_ConvexVolume_hmax_set(self, hmax:Number):void")))
void _wrap_ConvexVolume_hmax_set() {
  ConvexVolume *arg1 = (ConvexVolume *) 0 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, hmax);
  }
  if (arg1) (arg1)->hmax = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_ConvexVolume_hmax_get(self):Number")))
void _wrap_ConvexVolume_hmax_get() {
  ConvexVolume *arg1 = (ConvexVolume *) 0 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float) ((arg1)->hmax);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_ConvexVolume_nverts_set(self, nverts:int):void")))
void _wrap_ConvexVolume_nverts_set() {
  ConvexVolume *arg1 = (ConvexVolume *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, nverts);
  }
  if (arg1) (arg1)->nverts = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_ConvexVolume_nverts_get(self):int")))
void _wrap_ConvexVolume_nverts_get() {
  ConvexVolume *arg1 = (ConvexVolume *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->nverts);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_ConvexVolume_area_set(self, area:int):void")))
void _wrap_ConvexVolume_area_set() {
  ConvexVolume *arg1 = (ConvexVolume *) 0 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, area);
  }
  if (arg1) (arg1)->area = arg2;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_ConvexVolume_area_get(self):int")))
void _wrap_ConvexVolume_area_get() {
  ConvexVolume *arg1 = (ConvexVolume *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int) ((arg1)->area);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_new_ConvexVolume():int")))
void _wrap_new_ConvexVolume() {
  ConvexVolume *result ;
  
  result = (ConvexVolume *)new ConvexVolume();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_delete_ConvexVolume(self):void")))
void _wrap_delete_ConvexVolume() {
  ConvexVolume *arg1 = (ConvexVolume *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  delete arg1;
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_InputGeom_loadMesh(self, ctx:int, filepath:String):Boolean")))
void _wrap_InputGeom_loadMesh() {
  InputGeom *arg1 = (InputGeom *) 0 ;
  rcContext *arg2 = (rcContext *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  {
    AS3_GetScalarFromVar(arg2, ctx);
  }
  {
    AS3_MallocString(arg3, filepath);
  }
  result = (bool)(arg1)->loadMesh(arg2,(char const *)arg3);
  {
    free(arg3);
  }
  {
    AS3_DeclareVar(asresult, Boolean);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_InputGeom_getMesh(self):int")))
void _wrap_InputGeom_getMesh() {
  InputGeom *arg1 = (InputGeom *) 0 ;
  rcMeshLoaderObj *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (rcMeshLoaderObj *)((InputGeom const *)arg1)->getMesh();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_InputGeom_getMeshBoundsMin(self):int")))
void _wrap_InputGeom_getMeshBoundsMin() {
  InputGeom *arg1 = (InputGeom *) 0 ;
  float *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float *)((InputGeom const *)arg1)->getMeshBoundsMin();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_InputGeom_getMeshBoundsMax(self):int")))
void _wrap_InputGeom_getMeshBoundsMax() {
  InputGeom *arg1 = (InputGeom *) 0 ;
  float *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float *)((InputGeom const *)arg1)->getMeshBoundsMax();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_InputGeom_getChunkyMesh(self):int")))
void _wrap_InputGeom_getChunkyMesh() {
  InputGeom *arg1 = (InputGeom *) 0 ;
  rcChunkyTriMesh *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (rcChunkyTriMesh *)((InputGeom const *)arg1)->getChunkyMesh();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_InputGeom_getOffMeshConnectionCount(self):int")))
void _wrap_InputGeom_getOffMeshConnectionCount() {
  InputGeom *arg1 = (InputGeom *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int)((InputGeom const *)arg1)->getOffMeshConnectionCount();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_InputGeom_getOffMeshConnectionVerts(self):int")))
void _wrap_InputGeom_getOffMeshConnectionVerts() {
  InputGeom *arg1 = (InputGeom *) 0 ;
  float *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float *)((InputGeom const *)arg1)->getOffMeshConnectionVerts();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_InputGeom_getOffMeshConnectionRads(self):int")))
void _wrap_InputGeom_getOffMeshConnectionRads() {
  InputGeom *arg1 = (InputGeom *) 0 ;
  float *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (float *)((InputGeom const *)arg1)->getOffMeshConnectionRads();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_InputGeom_getOffMeshConnectionDirs(self):int")))
void _wrap_InputGeom_getOffMeshConnectionDirs() {
  InputGeom *arg1 = (InputGeom *) 0 ;
  unsigned char *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned char *)((InputGeom const *)arg1)->getOffMeshConnectionDirs();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_InputGeom_getOffMeshConnectionAreas(self):int")))
void _wrap_InputGeom_getOffMeshConnectionAreas() {
  InputGeom *arg1 = (InputGeom *) 0 ;
  unsigned char *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned char *)((InputGeom const *)arg1)->getOffMeshConnectionAreas();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_InputGeom_getOffMeshConnectionFlags(self):int")))
void _wrap_InputGeom_getOffMeshConnectionFlags() {
  InputGeom *arg1 = (InputGeom *) 0 ;
  unsigned short *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned short *)((InputGeom const *)arg1)->getOffMeshConnectionFlags();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_InputGeom_getOffMeshConnectionId(self):int")))
void _wrap_InputGeom_getOffMeshConnectionId() {
  InputGeom *arg1 = (InputGeom *) 0 ;
  unsigned int *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (unsigned int *)((InputGeom const *)arg1)->getOffMeshConnectionId();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_InputGeom_getConvexVolumeCount(self):int")))
void _wrap_InputGeom_getConvexVolumeCount() {
  InputGeom *arg1 = (InputGeom *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (int)((InputGeom const *)arg1)->getConvexVolumeCount();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_InputGeom_getConvexVolumes(self):int")))
void _wrap_InputGeom_getConvexVolumes() {
  InputGeom *arg1 = (InputGeom *) 0 ;
  ConvexVolume *result ;
  
  {
    AS3_GetScalarFromVar(arg1, self);
  }
  result = (ConvexVolume *)((InputGeom const *)arg1)->getConvexVolumes();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


