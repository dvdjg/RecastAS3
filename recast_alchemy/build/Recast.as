// This file was automatically generated by SWIG (http://www.swig.org).
// Version 2.0.4
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.

/* Function pointers support */
package com.adobe.flascc.swig {
import flash.utils.Dictionary;
import com.adobe.flascc.CModule;

[Weak]
var _SWIG_AS3Func2Ptr:Dictionary = new Dictionary();
[Weak]
var _SWIG_AS3Ptr2Func:Dictionary = new Dictionary();
[Weak]
var _SWIG_AS3FreeFuncPtrs:Array = new Array();

[Weak]
public function SWIG_AS3RegASCallWrapper(ptr:int, wrapper:Function):void {
    if (_SWIG_AS3Ptr2Func[ptr]) {
        throw("tried to register AS-callable wrapper for existing AS wrapper");
    }
    _SWIG_AS3Func2Ptr[wrapper] = ptr;
    _SWIG_AS3Ptr2Func[ptr] = wrapper;
}

[Weak]
public function SWIG_AS3UnregASCallWrapper(wrapper:Function):void {
    var ptr:int = _SWIG_AS3Func2Ptr[wrapper];
    delete _SWIG_AS3Func2Ptr[wrapper];
    delete _SWIG_AS3Ptr2Func[ptr];
}

// Returns Function objects callable from AS
[Weak]
public function SWIG_AS3GetASCallWrapper(ptr:int):Function {
    if (_SWIG_AS3Ptr2Func[ptr]) {
        return _SWIG_AS3Ptr2Func[ptr];
    } else {
        return null;
    }
}

// Returns the number of wrapped C and AS functions
[Weak]
public function SWIG_AS3WrapperNum():uint {
    var num:uint = 0;
    for (var key:int in _SWIG_AS3Ptr2Func) {
        num++;
    }
    return num;
}

[Weak]
public function SWIG_AS3RegCCallWrapper(func:Function, wrapper:Function):void {
    var ptr:int;
    
    if (_SWIG_AS3Func2Ptr[func]) {
        throw("tried to register C-callable wrapper for native C function");
    }

    if (_SWIG_AS3FreeFuncPtrs.length) {
        ptr = _SWIG_AS3FreeFuncPtrs.pop();
    } else {
        ptr = CModule.allocFunPtrs(null, 1, 4);
    }
    CModule.regFun(ptr, wrapper);
    _SWIG_AS3Func2Ptr[func] = ptr;
    _SWIG_AS3Ptr2Func[ptr] = func;

}

[Weak]
public function SWIG_AS3UnregCCallWrapper(func:Function):void {
    var ptr:int = _SWIG_AS3Func2Ptr[func];
    delete _SWIG_AS3Func2Ptr[func];
    delete _SWIG_AS3Ptr2Func[ptr];
    _SWIG_AS3FreeFuncPtrs.push(ptr);
}

// Returns a C function pointer corresponding to an Actionscript-callable 
// wrapper Function. (The C function is callable from C, of course).
[Weak]
public function SWIG_AS3GetCCallPtr(func:Function):int {
    if (_SWIG_AS3Func2Ptr[func]) {
        return _SWIG_AS3Func2Ptr[func];
    } else {
        return 0;
    }
}
} /* package */


package org.recastnavigation{
import C_Run.*;
import com.adobe.flascc.swig.*;
import flash.utils.ByteArray;

public class Recast {
	public static function get RC_PI():Number {
		return _wrap_RC_PI_get();
	}

	public static function get RC_LOG_PROGRESS():int{
		return _wrap_RC_LOG_PROGRESS();
	}

	public static function get RC_LOG_WARNING():int{
		return _wrap_RC_LOG_WARNING();
	}

	public static function get RC_LOG_ERROR():int{
		return _wrap_RC_LOG_ERROR();
	}

	public static function get RC_TIMER_TOTAL():int{
		return _wrap_RC_TIMER_TOTAL();
	}

	public static function get RC_TIMER_TEMP():int{
		return _wrap_RC_TIMER_TEMP();
	}

	public static function get RC_TIMER_RASTERIZE_TRIANGLES():int{
		return _wrap_RC_TIMER_RASTERIZE_TRIANGLES();
	}

	public static function get RC_TIMER_BUILD_COMPACTHEIGHTFIELD():int{
		return _wrap_RC_TIMER_BUILD_COMPACTHEIGHTFIELD();
	}

	public static function get RC_TIMER_BUILD_CONTOURS():int{
		return _wrap_RC_TIMER_BUILD_CONTOURS();
	}

	public static function get RC_TIMER_BUILD_CONTOURS_TRACE():int{
		return _wrap_RC_TIMER_BUILD_CONTOURS_TRACE();
	}

	public static function get RC_TIMER_BUILD_CONTOURS_SIMPLIFY():int{
		return _wrap_RC_TIMER_BUILD_CONTOURS_SIMPLIFY();
	}

	public static function get RC_TIMER_FILTER_BORDER():int{
		return _wrap_RC_TIMER_FILTER_BORDER();
	}

	public static function get RC_TIMER_FILTER_WALKABLE():int{
		return _wrap_RC_TIMER_FILTER_WALKABLE();
	}

	public static function get RC_TIMER_MEDIAN_AREA():int{
		return _wrap_RC_TIMER_MEDIAN_AREA();
	}

	public static function get RC_TIMER_FILTER_LOW_OBSTACLES():int{
		return _wrap_RC_TIMER_FILTER_LOW_OBSTACLES();
	}

	public static function get RC_TIMER_BUILD_POLYMESH():int{
		return _wrap_RC_TIMER_BUILD_POLYMESH();
	}

	public static function get RC_TIMER_MERGE_POLYMESH():int{
		return _wrap_RC_TIMER_MERGE_POLYMESH();
	}

	public static function get RC_TIMER_ERODE_AREA():int{
		return _wrap_RC_TIMER_ERODE_AREA();
	}

	public static function get RC_TIMER_MARK_BOX_AREA():int{
		return _wrap_RC_TIMER_MARK_BOX_AREA();
	}

	public static function get RC_TIMER_MARK_CYLINDER_AREA():int{
		return _wrap_RC_TIMER_MARK_CYLINDER_AREA();
	}

	public static function get RC_TIMER_MARK_CONVEXPOLY_AREA():int{
		return _wrap_RC_TIMER_MARK_CONVEXPOLY_AREA();
	}

	public static function get RC_TIMER_BUILD_DISTANCEFIELD():int{
		return _wrap_RC_TIMER_BUILD_DISTANCEFIELD();
	}

	public static function get RC_TIMER_BUILD_DISTANCEFIELD_DIST():int{
		return _wrap_RC_TIMER_BUILD_DISTANCEFIELD_DIST();
	}

	public static function get RC_TIMER_BUILD_DISTANCEFIELD_BLUR():int{
		return _wrap_RC_TIMER_BUILD_DISTANCEFIELD_BLUR();
	}

	public static function get RC_TIMER_BUILD_REGIONS():int{
		return _wrap_RC_TIMER_BUILD_REGIONS();
	}

	public static function get RC_TIMER_BUILD_REGIONS_WATERSHED():int{
		return _wrap_RC_TIMER_BUILD_REGIONS_WATERSHED();
	}

	public static function get RC_TIMER_BUILD_REGIONS_EXPAND():int{
		return _wrap_RC_TIMER_BUILD_REGIONS_EXPAND();
	}

	public static function get RC_TIMER_BUILD_REGIONS_FLOOD():int{
		return _wrap_RC_TIMER_BUILD_REGIONS_FLOOD();
	}

	public static function get RC_TIMER_BUILD_REGIONS_FILTER():int{
		return _wrap_RC_TIMER_BUILD_REGIONS_FILTER();
	}

	public static function get RC_TIMER_BUILD_LAYERS():int{
		return _wrap_RC_TIMER_BUILD_LAYERS();
	}

	public static function get RC_TIMER_BUILD_POLYMESHDETAIL():int{
		return _wrap_RC_TIMER_BUILD_POLYMESHDETAIL();
	}

	public static function get RC_TIMER_MERGE_POLYMESHDETAIL():int{
		return _wrap_RC_TIMER_MERGE_POLYMESHDETAIL();
	}

	public static function get RC_MAX_TIMERS():int{
		return _wrap_RC_MAX_TIMERS();
	}

	public static function get RC_SPAN_HEIGHT_BITS():int {
		return _wrap_RC_SPAN_HEIGHT_BITS_get();
	}

	public static function get RC_SPAN_MAX_HEIGHT():int {
		return _wrap_RC_SPAN_MAX_HEIGHT_get();
	}

	public static function get RC_SPANS_PER_POOL():int {
		return _wrap_RC_SPANS_PER_POOL_get();
	}

	public static function rcAllocHeightfield():int {
		return _wrap_rcAllocHeightfield();
	}

	public static function rcFreeHeightField(hf:int):void {
		_wrap_rcFreeHeightField(hf);
	}

	public static function rcAllocCompactHeightfield():int {
		return _wrap_rcAllocCompactHeightfield();
	}

	public static function rcFreeCompactHeightfield(chf:int):void {
		_wrap_rcFreeCompactHeightfield(chf);
	}

	public static function rcAllocHeightfieldLayerSet():int {
		return _wrap_rcAllocHeightfieldLayerSet();
	}

	public static function rcFreeHeightfieldLayerSet(lset:int):void {
		_wrap_rcFreeHeightfieldLayerSet(lset);
	}

	public static function rcAllocContourSet():int {
		return _wrap_rcAllocContourSet();
	}

	public static function rcFreeContourSet(cset:int):void {
		_wrap_rcFreeContourSet(cset);
	}

	public static function rcAllocPolyMesh():int {
		return _wrap_rcAllocPolyMesh();
	}

	public static function rcFreePolyMesh(pmesh:int):void {
		_wrap_rcFreePolyMesh(pmesh);
	}

	public static function rcAllocPolyMeshDetail():int {
		return _wrap_rcAllocPolyMeshDetail();
	}

	public static function rcFreePolyMeshDetail(dmesh:int):void {
		_wrap_rcFreePolyMeshDetail(dmesh);
	}

	public static function get RC_BORDER_REG():int {
		return _wrap_RC_BORDER_REG_get();
	}

	public static function get RC_BORDER_VERTEX():int {
		return _wrap_RC_BORDER_VERTEX_get();
	}

	public static function get RC_AREA_BORDER():int {
		return _wrap_RC_AREA_BORDER_get();
	}

	public static function get RC_CONTOUR_TESS_WALL_EDGES():int{
		return _wrap_RC_CONTOUR_TESS_WALL_EDGES();
	}

	public static function get RC_CONTOUR_TESS_AREA_EDGES():int{
		return _wrap_RC_CONTOUR_TESS_AREA_EDGES();
	}

	public static function get RC_CONTOUR_REG_MASK():int {
		return _wrap_RC_CONTOUR_REG_MASK_get();
	}

	public static function get RC_MESH_NULL_IDX():int {
		return _wrap_RC_MESH_NULL_IDX_get();
	}

	public static function get RC_NULL_AREA():String {
		return _wrap_RC_NULL_AREA_get();
	}

	public static function get RC_WALKABLE_AREA():String {
		return _wrap_RC_WALKABLE_AREA_get();
	}

	public static function get RC_NOT_CONNECTED():int {
		return _wrap_RC_NOT_CONNECTED_get();
	}

	public static function rcSqrt(x:Number):Number {
		return _wrap_rcSqrt(x);
	}

	public static function rcVcross(dest:int, v1:int, v2:int):void {
		_wrap_rcVcross(dest, v1, v2);
	}

	public static function rcVdot(v1:int, v2:int):Number {
		return _wrap_rcVdot(v1, v2);
	}

	public static function rcVmad(dest:int, v1:int, v2:int, s:Number):void {
		_wrap_rcVmad(dest, v1, v2, s);
	}

	public static function rcVadd(dest:int, v1:int, v2:int):void {
		_wrap_rcVadd(dest, v1, v2);
	}

	public static function rcVsub(dest:int, v1:int, v2:int):void {
		_wrap_rcVsub(dest, v1, v2);
	}

	public static function rcVmin(mn:int, v:int):void {
		_wrap_rcVmin(mn, v);
	}

	public static function rcVmax(mx:int, v:int):void {
		_wrap_rcVmax(mx, v);
	}

	public static function rcVcopy(dest:int, v:int):void {
		_wrap_rcVcopy(dest, v);
	}

	public static function rcVdist(v1:int, v2:int):Number {
		return _wrap_rcVdist(v1, v2);
	}

	public static function rcVdistSqr(v1:int, v2:int):Number {
		return _wrap_rcVdistSqr(v1, v2);
	}

	public static function rcVnormalize(v:int):void {
		_wrap_rcVnormalize(v);
	}

	public static function rcCalcBounds(verts:int, nv:int, bmin:int, bmax:int):void {
		_wrap_rcCalcBounds(verts, nv, bmin, bmax);
	}

	public static function rcCalcGridSize(bmin:int, bmax:int, cs:Number, w:int, h:int):void {
		_wrap_rcCalcGridSize(bmin, bmax, cs, w, h);
	}

	public static function rcCreateHeightfield(ctx:int, hf:int, width:int, height:int, bmin:int, bmax:int, cs:Number, ch:Number):Boolean {
		return _wrap_rcCreateHeightfield(ctx, hf, width, height, bmin, bmax, cs, ch);
	}

	public static function rcMarkWalkableTriangles(ctx:int, walkableSlopeAngle:Number, verts:int, nv:int, tris:int, nt:int, areas:int):void {
		_wrap_rcMarkWalkableTriangles(ctx, walkableSlopeAngle, verts, nv, tris, nt, areas);
	}

	public static function rcClearUnwalkableTriangles(ctx:int, walkableSlopeAngle:Number, verts:int, nv:int, tris:int, nt:int, areas:int):void {
		_wrap_rcClearUnwalkableTriangles(ctx, walkableSlopeAngle, verts, nv, tris, nt, areas);
	}

	public static function rcAddSpan(ctx:int, hf:int, x:int, y:int, smin:int, smax:int, area:String, flagMergeThr:int):void {
		_wrap_rcAddSpan(ctx, hf, x, y, smin, smax, area, flagMergeThr);
	}

	public static function rcRasterizeTriangle(ctx:int, v0:int, v1:int, v2:int, area:String, solid:int, flagMergeThr:int):void {
		_wrap_rcRasterizeTriangle(ctx, v0, v1, v2, area, solid, flagMergeThr);
	}

	public static function rcRasterizeTriangles(ctx:int, verts:int, nv:int, tris:int, areas:int, nt:int, solid:int, flagMergeThr:int):void {
		_wrap_rcRasterizeTriangles(ctx, verts, nv, tris, areas, nt, solid, flagMergeThr);
	}

	public static function rcFilterLowHangingWalkableObstacles(ctx:int, walkableClimb:int, solid:int):void {
		_wrap_rcFilterLowHangingWalkableObstacles(ctx, walkableClimb, solid);
	}

	public static function rcFilterLedgeSpans(ctx:int, walkableHeight:int, walkableClimb:int, solid:int):void {
		_wrap_rcFilterLedgeSpans(ctx, walkableHeight, walkableClimb, solid);
	}

	public static function rcFilterWalkableLowHeightSpans(ctx:int, walkableHeight:int, solid:int):void {
		_wrap_rcFilterWalkableLowHeightSpans(ctx, walkableHeight, solid);
	}

	public static function rcGetHeightFieldSpanCount(ctx:int, hf:int):int {
		return _wrap_rcGetHeightFieldSpanCount(ctx, hf);
	}

	public static function rcBuildCompactHeightfield(ctx:int, walkableHeight:int, walkableClimb:int, hf:int, chf:int):Boolean {
		return _wrap_rcBuildCompactHeightfield(ctx, walkableHeight, walkableClimb, hf, chf);
	}

	public static function rcErodeWalkableArea(ctx:int, radius:int, chf:int):Boolean {
		return _wrap_rcErodeWalkableArea(ctx, radius, chf);
	}

	public static function rcMedianFilterWalkableArea(ctx:int, chf:int):Boolean {
		return _wrap_rcMedianFilterWalkableArea(ctx, chf);
	}

	public static function rcMarkBoxArea(ctx:int, bmin:int, bmax:int, areaId:String, chf:int):void {
		_wrap_rcMarkBoxArea(ctx, bmin, bmax, areaId, chf);
	}

	public static function rcMarkConvexPolyArea(ctx:int, verts:int, nverts:int, hmin:Number, hmax:Number, areaId:String, chf:int):void {
		_wrap_rcMarkConvexPolyArea(ctx, verts, nverts, hmin, hmax, areaId, chf);
	}

	public static function rcOffsetPoly(verts:int, nverts:int, offset:Number, outVerts:int, maxOutVerts:int):int {
		return _wrap_rcOffsetPoly(verts, nverts, offset, outVerts, maxOutVerts);
	}

	public static function rcMarkCylinderArea(ctx:int, pos:int, r:Number, h:Number, areaId:String, chf:int):void {
		_wrap_rcMarkCylinderArea(ctx, pos, r, h, areaId, chf);
	}

	public static function rcBuildDistanceField(ctx:int, chf:int):Boolean {
		return _wrap_rcBuildDistanceField(ctx, chf);
	}

	public static function rcBuildRegions(ctx:int, chf:int, borderSize:int, minRegionArea:int, mergeRegionArea:int):Boolean {
		return _wrap_rcBuildRegions(ctx, chf, borderSize, minRegionArea, mergeRegionArea);
	}

	public static function rcBuildRegionsMonotone(ctx:int, chf:int, borderSize:int, minRegionArea:int, mergeRegionArea:int):Boolean {
		return _wrap_rcBuildRegionsMonotone(ctx, chf, borderSize, minRegionArea, mergeRegionArea);
	}

	public static function rcSetCon(s:int, dir:int, i:int):void {
		_wrap_rcSetCon(s, dir, i);
	}

	public static function rcGetCon(s:int, dir:int):int {
		return _wrap_rcGetCon(s, dir);
	}

	public static function rcGetDirOffsetX(dir:int):int {
		return _wrap_rcGetDirOffsetX(dir);
	}

	public static function rcGetDirOffsetY(dir:int):int {
		return _wrap_rcGetDirOffsetY(dir);
	}

	public static function rcBuildHeightfieldLayers(ctx:int, chf:int, borderSize:int, walkableHeight:int, lset:int):Boolean {
		return _wrap_rcBuildHeightfieldLayers(ctx, chf, borderSize, walkableHeight, lset);
	}

	public static function rcBuildContours(ctx:int, chf:int, maxError:Number, maxEdgeLen:int, cset:int, flags:int):Boolean {
		return _wrap_rcBuildContours(ctx, chf, maxError, maxEdgeLen, cset, flags);
	}

	public static function rcBuildPolyMesh(ctx:int, cset:int, nvp:int, mesh:int):Boolean {
		return _wrap_rcBuildPolyMesh(ctx, cset, nvp, mesh);
	}

	public static function rcMergePolyMeshes(ctx:int, meshes:int, nmeshes:int, mesh:int):Boolean {
		return _wrap_rcMergePolyMeshes(ctx, meshes, nmeshes, mesh);
	}

	public static function rcBuildPolyMeshDetail(ctx:int, mesh:int, chf:int, sampleDist:Number, sampleMaxError:Number, dmesh:int):Boolean {
		return _wrap_rcBuildPolyMeshDetail(ctx, mesh, chf, sampleDist, sampleMaxError, dmesh);
	}

	public static function rcCopyPolyMesh(ctx:int, src:int, dst:int):Boolean {
		return _wrap_rcCopyPolyMesh(ctx, src, dst);
	}

	public static function rcMergePolyMeshDetails(ctx:int, meshes:int, nmeshes:int, mesh:int):Boolean {
		return _wrap_rcMergePolyMeshDetails(ctx, meshes, nmeshes, mesh);
	}

	public static function get SAMPLE_POLYAREA_GROUND():int{
		return _wrap_SAMPLE_POLYAREA_GROUND();
	}

	public static function get SAMPLE_POLYAREA_WATER():int{
		return _wrap_SAMPLE_POLYAREA_WATER();
	}

	public static function get SAMPLE_POLYAREA_ROAD():int{
		return _wrap_SAMPLE_POLYAREA_ROAD();
	}

	public static function get SAMPLE_POLYAREA_DOOR():int{
		return _wrap_SAMPLE_POLYAREA_DOOR();
	}

	public static function get SAMPLE_POLYAREA_GRASS():int{
		return _wrap_SAMPLE_POLYAREA_GRASS();
	}

	public static function get SAMPLE_POLYAREA_JUMP():int{
		return _wrap_SAMPLE_POLYAREA_JUMP();
	}

	public static function get SAMPLE_POLYFLAGS_WALK():int{
		return _wrap_SAMPLE_POLYFLAGS_WALK();
	}

	public static function get SAMPLE_POLYFLAGS_SWIM():int{
		return _wrap_SAMPLE_POLYFLAGS_SWIM();
	}

	public static function get SAMPLE_POLYFLAGS_DOOR():int{
		return _wrap_SAMPLE_POLYFLAGS_DOOR();
	}

	public static function get SAMPLE_POLYFLAGS_JUMP():int{
		return _wrap_SAMPLE_POLYFLAGS_JUMP();
	}

	public static function get SAMPLE_POLYFLAGS_DISABLED():int{
		return _wrap_SAMPLE_POLYFLAGS_DISABLED();
	}

	public static function get SAMPLE_POLYFLAGS_ALL():int{
		return _wrap_SAMPLE_POLYFLAGS_ALL();
	}

	public static function get MAX_CONVEXVOL_PTS():int {
		return _wrap_MAX_CONVEXVOL_PTS_get();
	}

}

public class rcContext {
	public var swigCPtr:int;
	public static function create(state:Boolean):rcContext {
		var obj = new rcContext();
		obj.swigCPtr = _wrap_new_rcContext(state);
		return obj;
	}

	public function destroy():void {
		_wrap_delete_rcContext(swigCPtr);
	}

	public function enableLog(state:Boolean):void {
		_wrap_rcContext_enableLog(swigCPtr, state);
	}

	public function resetLog():void {
		_wrap_rcContext_resetLog(swigCPtr);
	}

	public function log(category:int, format:String, arg4):void {
		_wrap_rcContext_log(swigCPtr, category, format, arg4);
	}

	public function enableTimer(state:Boolean):void {
		_wrap_rcContext_enableTimer(swigCPtr, state);
	}

	public function resetTimers():void {
		_wrap_rcContext_resetTimers(swigCPtr);
	}

	public function startTimer(_label:int):void {
		_wrap_rcContext_startTimer(swigCPtr, _label);
	}

	public function stopTimer(_label:int):void {
		_wrap_rcContext_stopTimer(swigCPtr, _label);
	}

	public function getAccumulatedTime(_label:int):int {
		return _wrap_rcContext_getAccumulatedTime(swigCPtr, _label);
	}

}


public class rcConfig {
	public var swigCPtr:int;
	public function set width(width:int):void {
		_wrap_rcConfig_width_set(swigCPtr, width);
	}

	public function get width():int {
		return _wrap_rcConfig_width_get(swigCPtr);
	}

	public function set height(height:int):void {
		_wrap_rcConfig_height_set(swigCPtr, height);
	}

	public function get height():int {
		return _wrap_rcConfig_height_get(swigCPtr);
	}

	public function set tileSize(tileSize:int):void {
		_wrap_rcConfig_tileSize_set(swigCPtr, tileSize);
	}

	public function get tileSize():int {
		return _wrap_rcConfig_tileSize_get(swigCPtr);
	}

	public function set borderSize(borderSize:int):void {
		_wrap_rcConfig_borderSize_set(swigCPtr, borderSize);
	}

	public function get borderSize():int {
		return _wrap_rcConfig_borderSize_get(swigCPtr);
	}

	public function set cs(cs:Number):void {
		_wrap_rcConfig_cs_set(swigCPtr, cs);
	}

	public function get cs():Number {
		return _wrap_rcConfig_cs_get(swigCPtr);
	}

	public function set ch(ch:Number):void {
		_wrap_rcConfig_ch_set(swigCPtr, ch);
	}

	public function get ch():Number {
		return _wrap_rcConfig_ch_get(swigCPtr);
	}

	public function set bmin(bmin:int):void {
		_wrap_rcConfig_bmin_set(swigCPtr, bmin);
	}

	public function get bmin():int {
		return _wrap_rcConfig_bmin_get(swigCPtr);
	}

	public function set bmax(bmax:int):void {
		_wrap_rcConfig_bmax_set(swigCPtr, bmax);
	}

	public function get bmax():int {
		return _wrap_rcConfig_bmax_get(swigCPtr);
	}

	public function set walkableSlopeAngle(walkableSlopeAngle:Number):void {
		_wrap_rcConfig_walkableSlopeAngle_set(swigCPtr, walkableSlopeAngle);
	}

	public function get walkableSlopeAngle():Number {
		return _wrap_rcConfig_walkableSlopeAngle_get(swigCPtr);
	}

	public function set walkableHeight(walkableHeight:int):void {
		_wrap_rcConfig_walkableHeight_set(swigCPtr, walkableHeight);
	}

	public function get walkableHeight():int {
		return _wrap_rcConfig_walkableHeight_get(swigCPtr);
	}

	public function set walkableClimb(walkableClimb:int):void {
		_wrap_rcConfig_walkableClimb_set(swigCPtr, walkableClimb);
	}

	public function get walkableClimb():int {
		return _wrap_rcConfig_walkableClimb_get(swigCPtr);
	}

	public function set walkableRadius(walkableRadius:int):void {
		_wrap_rcConfig_walkableRadius_set(swigCPtr, walkableRadius);
	}

	public function get walkableRadius():int {
		return _wrap_rcConfig_walkableRadius_get(swigCPtr);
	}

	public function set maxEdgeLen(maxEdgeLen:int):void {
		_wrap_rcConfig_maxEdgeLen_set(swigCPtr, maxEdgeLen);
	}

	public function get maxEdgeLen():int {
		return _wrap_rcConfig_maxEdgeLen_get(swigCPtr);
	}

	public function set maxSimplificationError(maxSimplificationError:Number):void {
		_wrap_rcConfig_maxSimplificationError_set(swigCPtr, maxSimplificationError);
	}

	public function get maxSimplificationError():Number {
		return _wrap_rcConfig_maxSimplificationError_get(swigCPtr);
	}

	public function set minRegionArea(minRegionArea:int):void {
		_wrap_rcConfig_minRegionArea_set(swigCPtr, minRegionArea);
	}

	public function get minRegionArea():int {
		return _wrap_rcConfig_minRegionArea_get(swigCPtr);
	}

	public function set mergeRegionArea(mergeRegionArea:int):void {
		_wrap_rcConfig_mergeRegionArea_set(swigCPtr, mergeRegionArea);
	}

	public function get mergeRegionArea():int {
		return _wrap_rcConfig_mergeRegionArea_get(swigCPtr);
	}

	public function set maxVertsPerPoly(maxVertsPerPoly:int):void {
		_wrap_rcConfig_maxVertsPerPoly_set(swigCPtr, maxVertsPerPoly);
	}

	public function get maxVertsPerPoly():int {
		return _wrap_rcConfig_maxVertsPerPoly_get(swigCPtr);
	}

	public function set detailSampleDist(detailSampleDist:Number):void {
		_wrap_rcConfig_detailSampleDist_set(swigCPtr, detailSampleDist);
	}

	public function get detailSampleDist():Number {
		return _wrap_rcConfig_detailSampleDist_get(swigCPtr);
	}

	public function set detailSampleMaxError(detailSampleMaxError:Number):void {
		_wrap_rcConfig_detailSampleMaxError_set(swigCPtr, detailSampleMaxError);
	}

	public function get detailSampleMaxError():Number {
		return _wrap_rcConfig_detailSampleMaxError_get(swigCPtr);
	}

	public static function create():rcConfig {
		var obj = new rcConfig();
		obj.swigCPtr = _wrap_new_rcConfig();
		return obj;
	}

	public function destroy():void {
		_wrap_delete_rcConfig(swigCPtr);
	}

}


public class rcSpan {
	public var swigCPtr:int;
	public function set smin(smin:int):void {
		_wrap_rcSpan_smin_set(swigCPtr, smin);
	}

	public function get smin():int {
		return _wrap_rcSpan_smin_get(swigCPtr);
	}

	public function set smax(smax:int):void {
		_wrap_rcSpan_smax_set(swigCPtr, smax);
	}

	public function get smax():int {
		return _wrap_rcSpan_smax_get(swigCPtr);
	}

	public function set area(area:int):void {
		_wrap_rcSpan_area_set(swigCPtr, area);
	}

	public function get area():int {
		return _wrap_rcSpan_area_get(swigCPtr);
	}

	public function set next(next:int):void {
		_wrap_rcSpan_next_set(swigCPtr, next);
	}

	public function get next():int {
		return _wrap_rcSpan_next_get(swigCPtr);
	}

	public static function create():rcSpan {
		var obj = new rcSpan();
		obj.swigCPtr = _wrap_new_rcSpan();
		return obj;
	}

	public function destroy():void {
		_wrap_delete_rcSpan(swigCPtr);
	}

}


public class rcSpanPool {
	public var swigCPtr:int;
	public function set next(next:int):void {
		_wrap_rcSpanPool_next_set(swigCPtr, next);
	}

	public function get next():int {
		return _wrap_rcSpanPool_next_get(swigCPtr);
	}

	public function set items(items:int):void {
		_wrap_rcSpanPool_items_set(swigCPtr, items);
	}

	public function get items():int {
		return _wrap_rcSpanPool_items_get(swigCPtr);
	}

	public static function create():rcSpanPool {
		var obj = new rcSpanPool();
		obj.swigCPtr = _wrap_new_rcSpanPool();
		return obj;
	}

	public function destroy():void {
		_wrap_delete_rcSpanPool(swigCPtr);
	}

}


public class rcHeightfield {
	public var swigCPtr:int;
	public function set width(width:int):void {
		_wrap_rcHeightfield_width_set(swigCPtr, width);
	}

	public function get width():int {
		return _wrap_rcHeightfield_width_get(swigCPtr);
	}

	public function set height(height:int):void {
		_wrap_rcHeightfield_height_set(swigCPtr, height);
	}

	public function get height():int {
		return _wrap_rcHeightfield_height_get(swigCPtr);
	}

	public function set bmin(bmin:int):void {
		_wrap_rcHeightfield_bmin_set(swigCPtr, bmin);
	}

	public function get bmin():int {
		return _wrap_rcHeightfield_bmin_get(swigCPtr);
	}

	public function set bmax(bmax:int):void {
		_wrap_rcHeightfield_bmax_set(swigCPtr, bmax);
	}

	public function get bmax():int {
		return _wrap_rcHeightfield_bmax_get(swigCPtr);
	}

	public function set cs(cs:Number):void {
		_wrap_rcHeightfield_cs_set(swigCPtr, cs);
	}

	public function get cs():Number {
		return _wrap_rcHeightfield_cs_get(swigCPtr);
	}

	public function set ch(ch:Number):void {
		_wrap_rcHeightfield_ch_set(swigCPtr, ch);
	}

	public function get ch():Number {
		return _wrap_rcHeightfield_ch_get(swigCPtr);
	}

	public function set spans(spans:int):void {
		_wrap_rcHeightfield_spans_set(swigCPtr, spans);
	}

	public function get spans():int {
		return _wrap_rcHeightfield_spans_get(swigCPtr);
	}

	public function set pools(pools:int):void {
		_wrap_rcHeightfield_pools_set(swigCPtr, pools);
	}

	public function get pools():int {
		return _wrap_rcHeightfield_pools_get(swigCPtr);
	}

	public function set freelist(freelist:int):void {
		_wrap_rcHeightfield_freelist_set(swigCPtr, freelist);
	}

	public function get freelist():int {
		return _wrap_rcHeightfield_freelist_get(swigCPtr);
	}

	public static function create():rcHeightfield {
		var obj = new rcHeightfield();
		obj.swigCPtr = _wrap_new_rcHeightfield();
		return obj;
	}

	public function destroy():void {
		_wrap_delete_rcHeightfield(swigCPtr);
	}

}


public class rcCompactCell {
	public var swigCPtr:int;
	public function set index(index:int):void {
		_wrap_rcCompactCell_index_set(swigCPtr, index);
	}

	public function get index():int {
		return _wrap_rcCompactCell_index_get(swigCPtr);
	}

	public function set count(count:int):void {
		_wrap_rcCompactCell_count_set(swigCPtr, count);
	}

	public function get count():int {
		return _wrap_rcCompactCell_count_get(swigCPtr);
	}

	public static function create():rcCompactCell {
		var obj = new rcCompactCell();
		obj.swigCPtr = _wrap_new_rcCompactCell();
		return obj;
	}

	public function destroy():void {
		_wrap_delete_rcCompactCell(swigCPtr);
	}

}


public class rcCompactSpan {
	public var swigCPtr:int;
	public function set y(y:int):void {
		_wrap_rcCompactSpan_y_set(swigCPtr, y);
	}

	public function get y():int {
		return _wrap_rcCompactSpan_y_get(swigCPtr);
	}

	public function set reg(reg:int):void {
		_wrap_rcCompactSpan_reg_set(swigCPtr, reg);
	}

	public function get reg():int {
		return _wrap_rcCompactSpan_reg_get(swigCPtr);
	}

	public function set con(con:int):void {
		_wrap_rcCompactSpan_con_set(swigCPtr, con);
	}

	public function get con():int {
		return _wrap_rcCompactSpan_con_get(swigCPtr);
	}

	public function set h(h:int):void {
		_wrap_rcCompactSpan_h_set(swigCPtr, h);
	}

	public function get h():int {
		return _wrap_rcCompactSpan_h_get(swigCPtr);
	}

	public static function create():rcCompactSpan {
		var obj = new rcCompactSpan();
		obj.swigCPtr = _wrap_new_rcCompactSpan();
		return obj;
	}

	public function destroy():void {
		_wrap_delete_rcCompactSpan(swigCPtr);
	}

}


public class rcCompactHeightfield {
	public var swigCPtr:int;
	public function set width(width:int):void {
		_wrap_rcCompactHeightfield_width_set(swigCPtr, width);
	}

	public function get width():int {
		return _wrap_rcCompactHeightfield_width_get(swigCPtr);
	}

	public function set height(height:int):void {
		_wrap_rcCompactHeightfield_height_set(swigCPtr, height);
	}

	public function get height():int {
		return _wrap_rcCompactHeightfield_height_get(swigCPtr);
	}

	public function set spanCount(spanCount:int):void {
		_wrap_rcCompactHeightfield_spanCount_set(swigCPtr, spanCount);
	}

	public function get spanCount():int {
		return _wrap_rcCompactHeightfield_spanCount_get(swigCPtr);
	}

	public function set walkableHeight(walkableHeight:int):void {
		_wrap_rcCompactHeightfield_walkableHeight_set(swigCPtr, walkableHeight);
	}

	public function get walkableHeight():int {
		return _wrap_rcCompactHeightfield_walkableHeight_get(swigCPtr);
	}

	public function set walkableClimb(walkableClimb:int):void {
		_wrap_rcCompactHeightfield_walkableClimb_set(swigCPtr, walkableClimb);
	}

	public function get walkableClimb():int {
		return _wrap_rcCompactHeightfield_walkableClimb_get(swigCPtr);
	}

	public function set borderSize(borderSize:int):void {
		_wrap_rcCompactHeightfield_borderSize_set(swigCPtr, borderSize);
	}

	public function get borderSize():int {
		return _wrap_rcCompactHeightfield_borderSize_get(swigCPtr);
	}

	public function set maxDistance(maxDistance:int):void {
		_wrap_rcCompactHeightfield_maxDistance_set(swigCPtr, maxDistance);
	}

	public function get maxDistance():int {
		return _wrap_rcCompactHeightfield_maxDistance_get(swigCPtr);
	}

	public function set maxRegions(maxRegions:int):void {
		_wrap_rcCompactHeightfield_maxRegions_set(swigCPtr, maxRegions);
	}

	public function get maxRegions():int {
		return _wrap_rcCompactHeightfield_maxRegions_get(swigCPtr);
	}

	public function set bmin(bmin:int):void {
		_wrap_rcCompactHeightfield_bmin_set(swigCPtr, bmin);
	}

	public function get bmin():int {
		return _wrap_rcCompactHeightfield_bmin_get(swigCPtr);
	}

	public function set bmax(bmax:int):void {
		_wrap_rcCompactHeightfield_bmax_set(swigCPtr, bmax);
	}

	public function get bmax():int {
		return _wrap_rcCompactHeightfield_bmax_get(swigCPtr);
	}

	public function set cs(cs:Number):void {
		_wrap_rcCompactHeightfield_cs_set(swigCPtr, cs);
	}

	public function get cs():Number {
		return _wrap_rcCompactHeightfield_cs_get(swigCPtr);
	}

	public function set ch(ch:Number):void {
		_wrap_rcCompactHeightfield_ch_set(swigCPtr, ch);
	}

	public function get ch():Number {
		return _wrap_rcCompactHeightfield_ch_get(swigCPtr);
	}

	public function set cells(cells:int):void {
		_wrap_rcCompactHeightfield_cells_set(swigCPtr, cells);
	}

	public function get cells():int {
		return _wrap_rcCompactHeightfield_cells_get(swigCPtr);
	}

	public function set spans(spans:int):void {
		_wrap_rcCompactHeightfield_spans_set(swigCPtr, spans);
	}

	public function get spans():int {
		return _wrap_rcCompactHeightfield_spans_get(swigCPtr);
	}

	public function set dist(dist:int):void {
		_wrap_rcCompactHeightfield_dist_set(swigCPtr, dist);
	}

	public function get dist():int {
		return _wrap_rcCompactHeightfield_dist_get(swigCPtr);
	}

	public function set areas(areas:int):void {
		_wrap_rcCompactHeightfield_areas_set(swigCPtr, areas);
	}

	public function get areas():int {
		return _wrap_rcCompactHeightfield_areas_get(swigCPtr);
	}

	public static function create():rcCompactHeightfield {
		var obj = new rcCompactHeightfield();
		obj.swigCPtr = _wrap_new_rcCompactHeightfield();
		return obj;
	}

	public function destroy():void {
		_wrap_delete_rcCompactHeightfield(swigCPtr);
	}

}


public class rcHeightfieldLayer {
	public var swigCPtr:int;
	public function set bmin(bmin:int):void {
		_wrap_rcHeightfieldLayer_bmin_set(swigCPtr, bmin);
	}

	public function get bmin():int {
		return _wrap_rcHeightfieldLayer_bmin_get(swigCPtr);
	}

	public function set bmax(bmax:int):void {
		_wrap_rcHeightfieldLayer_bmax_set(swigCPtr, bmax);
	}

	public function get bmax():int {
		return _wrap_rcHeightfieldLayer_bmax_get(swigCPtr);
	}

	public function set cs(cs:Number):void {
		_wrap_rcHeightfieldLayer_cs_set(swigCPtr, cs);
	}

	public function get cs():Number {
		return _wrap_rcHeightfieldLayer_cs_get(swigCPtr);
	}

	public function set ch(ch:Number):void {
		_wrap_rcHeightfieldLayer_ch_set(swigCPtr, ch);
	}

	public function get ch():Number {
		return _wrap_rcHeightfieldLayer_ch_get(swigCPtr);
	}

	public function set width(width:int):void {
		_wrap_rcHeightfieldLayer_width_set(swigCPtr, width);
	}

	public function get width():int {
		return _wrap_rcHeightfieldLayer_width_get(swigCPtr);
	}

	public function set height(height:int):void {
		_wrap_rcHeightfieldLayer_height_set(swigCPtr, height);
	}

	public function get height():int {
		return _wrap_rcHeightfieldLayer_height_get(swigCPtr);
	}

	public function set minx(minx:int):void {
		_wrap_rcHeightfieldLayer_minx_set(swigCPtr, minx);
	}

	public function get minx():int {
		return _wrap_rcHeightfieldLayer_minx_get(swigCPtr);
	}

	public function set maxx(maxx:int):void {
		_wrap_rcHeightfieldLayer_maxx_set(swigCPtr, maxx);
	}

	public function get maxx():int {
		return _wrap_rcHeightfieldLayer_maxx_get(swigCPtr);
	}

	public function set miny(miny:int):void {
		_wrap_rcHeightfieldLayer_miny_set(swigCPtr, miny);
	}

	public function get miny():int {
		return _wrap_rcHeightfieldLayer_miny_get(swigCPtr);
	}

	public function set maxy(maxy:int):void {
		_wrap_rcHeightfieldLayer_maxy_set(swigCPtr, maxy);
	}

	public function get maxy():int {
		return _wrap_rcHeightfieldLayer_maxy_get(swigCPtr);
	}

	public function set hmin(hmin:int):void {
		_wrap_rcHeightfieldLayer_hmin_set(swigCPtr, hmin);
	}

	public function get hmin():int {
		return _wrap_rcHeightfieldLayer_hmin_get(swigCPtr);
	}

	public function set hmax(hmax:int):void {
		_wrap_rcHeightfieldLayer_hmax_set(swigCPtr, hmax);
	}

	public function get hmax():int {
		return _wrap_rcHeightfieldLayer_hmax_get(swigCPtr);
	}

	public function set heights(heights:int):void {
		_wrap_rcHeightfieldLayer_heights_set(swigCPtr, heights);
	}

	public function get heights():int {
		return _wrap_rcHeightfieldLayer_heights_get(swigCPtr);
	}

	public function set areas(areas:int):void {
		_wrap_rcHeightfieldLayer_areas_set(swigCPtr, areas);
	}

	public function get areas():int {
		return _wrap_rcHeightfieldLayer_areas_get(swigCPtr);
	}

	public function set cons(cons:int):void {
		_wrap_rcHeightfieldLayer_cons_set(swigCPtr, cons);
	}

	public function get cons():int {
		return _wrap_rcHeightfieldLayer_cons_get(swigCPtr);
	}

	public static function create():rcHeightfieldLayer {
		var obj = new rcHeightfieldLayer();
		obj.swigCPtr = _wrap_new_rcHeightfieldLayer();
		return obj;
	}

	public function destroy():void {
		_wrap_delete_rcHeightfieldLayer(swigCPtr);
	}

}


public class rcHeightfieldLayerSet {
	public var swigCPtr:int;
	public function set layers(layers:int):void {
		_wrap_rcHeightfieldLayerSet_layers_set(swigCPtr, layers);
	}

	public function get layers():int {
		return _wrap_rcHeightfieldLayerSet_layers_get(swigCPtr);
	}

	public function set nlayers(nlayers:int):void {
		_wrap_rcHeightfieldLayerSet_nlayers_set(swigCPtr, nlayers);
	}

	public function get nlayers():int {
		return _wrap_rcHeightfieldLayerSet_nlayers_get(swigCPtr);
	}

	public static function create():rcHeightfieldLayerSet {
		var obj = new rcHeightfieldLayerSet();
		obj.swigCPtr = _wrap_new_rcHeightfieldLayerSet();
		return obj;
	}

	public function destroy():void {
		_wrap_delete_rcHeightfieldLayerSet(swigCPtr);
	}

}


public class rcContour {
	public var swigCPtr:int;
	public function set verts(verts:int):void {
		_wrap_rcContour_verts_set(swigCPtr, verts);
	}

	public function get verts():int {
		return _wrap_rcContour_verts_get(swigCPtr);
	}

	public function set nverts(nverts:int):void {
		_wrap_rcContour_nverts_set(swigCPtr, nverts);
	}

	public function get nverts():int {
		return _wrap_rcContour_nverts_get(swigCPtr);
	}

	public function set rverts(rverts:int):void {
		_wrap_rcContour_rverts_set(swigCPtr, rverts);
	}

	public function get rverts():int {
		return _wrap_rcContour_rverts_get(swigCPtr);
	}

	public function set nrverts(nrverts:int):void {
		_wrap_rcContour_nrverts_set(swigCPtr, nrverts);
	}

	public function get nrverts():int {
		return _wrap_rcContour_nrverts_get(swigCPtr);
	}

	public function set reg(reg:int):void {
		_wrap_rcContour_reg_set(swigCPtr, reg);
	}

	public function get reg():int {
		return _wrap_rcContour_reg_get(swigCPtr);
	}

	public function set area(area:String):void {
		_wrap_rcContour_area_set(swigCPtr, area);
	}

	public function get area():String {
		return _wrap_rcContour_area_get(swigCPtr);
	}

	public static function create():rcContour {
		var obj = new rcContour();
		obj.swigCPtr = _wrap_new_rcContour();
		return obj;
	}

	public function destroy():void {
		_wrap_delete_rcContour(swigCPtr);
	}

}


public class rcContourSet {
	public var swigCPtr:int;
	public function set conts(conts:int):void {
		_wrap_rcContourSet_conts_set(swigCPtr, conts);
	}

	public function get conts():int {
		return _wrap_rcContourSet_conts_get(swigCPtr);
	}

	public function set nconts(nconts:int):void {
		_wrap_rcContourSet_nconts_set(swigCPtr, nconts);
	}

	public function get nconts():int {
		return _wrap_rcContourSet_nconts_get(swigCPtr);
	}

	public function set bmin(bmin:int):void {
		_wrap_rcContourSet_bmin_set(swigCPtr, bmin);
	}

	public function get bmin():int {
		return _wrap_rcContourSet_bmin_get(swigCPtr);
	}

	public function set bmax(bmax:int):void {
		_wrap_rcContourSet_bmax_set(swigCPtr, bmax);
	}

	public function get bmax():int {
		return _wrap_rcContourSet_bmax_get(swigCPtr);
	}

	public function set cs(cs:Number):void {
		_wrap_rcContourSet_cs_set(swigCPtr, cs);
	}

	public function get cs():Number {
		return _wrap_rcContourSet_cs_get(swigCPtr);
	}

	public function set ch(ch:Number):void {
		_wrap_rcContourSet_ch_set(swigCPtr, ch);
	}

	public function get ch():Number {
		return _wrap_rcContourSet_ch_get(swigCPtr);
	}

	public function set width(width:int):void {
		_wrap_rcContourSet_width_set(swigCPtr, width);
	}

	public function get width():int {
		return _wrap_rcContourSet_width_get(swigCPtr);
	}

	public function set height(height:int):void {
		_wrap_rcContourSet_height_set(swigCPtr, height);
	}

	public function get height():int {
		return _wrap_rcContourSet_height_get(swigCPtr);
	}

	public function set borderSize(borderSize:int):void {
		_wrap_rcContourSet_borderSize_set(swigCPtr, borderSize);
	}

	public function get borderSize():int {
		return _wrap_rcContourSet_borderSize_get(swigCPtr);
	}

	public static function create():rcContourSet {
		var obj = new rcContourSet();
		obj.swigCPtr = _wrap_new_rcContourSet();
		return obj;
	}

	public function destroy():void {
		_wrap_delete_rcContourSet(swigCPtr);
	}

}


public class rcPolyMesh {
	public var swigCPtr:int;
	public function set verts(verts:int):void {
		_wrap_rcPolyMesh_verts_set(swigCPtr, verts);
	}

	public function get verts():int {
		return _wrap_rcPolyMesh_verts_get(swigCPtr);
	}

	public function set polys(polys:int):void {
		_wrap_rcPolyMesh_polys_set(swigCPtr, polys);
	}

	public function get polys():int {
		return _wrap_rcPolyMesh_polys_get(swigCPtr);
	}

	public function set regs(regs:int):void {
		_wrap_rcPolyMesh_regs_set(swigCPtr, regs);
	}

	public function get regs():int {
		return _wrap_rcPolyMesh_regs_get(swigCPtr);
	}

	public function set flags(flags:int):void {
		_wrap_rcPolyMesh_flags_set(swigCPtr, flags);
	}

	public function get flags():int {
		return _wrap_rcPolyMesh_flags_get(swigCPtr);
	}

	public function set areas(areas:int):void {
		_wrap_rcPolyMesh_areas_set(swigCPtr, areas);
	}

	public function get areas():int {
		return _wrap_rcPolyMesh_areas_get(swigCPtr);
	}

	public function set nverts(nverts:int):void {
		_wrap_rcPolyMesh_nverts_set(swigCPtr, nverts);
	}

	public function get nverts():int {
		return _wrap_rcPolyMesh_nverts_get(swigCPtr);
	}

	public function set npolys(npolys:int):void {
		_wrap_rcPolyMesh_npolys_set(swigCPtr, npolys);
	}

	public function get npolys():int {
		return _wrap_rcPolyMesh_npolys_get(swigCPtr);
	}

	public function set maxpolys(maxpolys:int):void {
		_wrap_rcPolyMesh_maxpolys_set(swigCPtr, maxpolys);
	}

	public function get maxpolys():int {
		return _wrap_rcPolyMesh_maxpolys_get(swigCPtr);
	}

	public function set nvp(nvp:int):void {
		_wrap_rcPolyMesh_nvp_set(swigCPtr, nvp);
	}

	public function get nvp():int {
		return _wrap_rcPolyMesh_nvp_get(swigCPtr);
	}

	public function set bmin(bmin:int):void {
		_wrap_rcPolyMesh_bmin_set(swigCPtr, bmin);
	}

	public function get bmin():int {
		return _wrap_rcPolyMesh_bmin_get(swigCPtr);
	}

	public function set bmax(bmax:int):void {
		_wrap_rcPolyMesh_bmax_set(swigCPtr, bmax);
	}

	public function get bmax():int {
		return _wrap_rcPolyMesh_bmax_get(swigCPtr);
	}

	public function set cs(cs:Number):void {
		_wrap_rcPolyMesh_cs_set(swigCPtr, cs);
	}

	public function get cs():Number {
		return _wrap_rcPolyMesh_cs_get(swigCPtr);
	}

	public function set ch(ch:Number):void {
		_wrap_rcPolyMesh_ch_set(swigCPtr, ch);
	}

	public function get ch():Number {
		return _wrap_rcPolyMesh_ch_get(swigCPtr);
	}

	public function set borderSize(borderSize:int):void {
		_wrap_rcPolyMesh_borderSize_set(swigCPtr, borderSize);
	}

	public function get borderSize():int {
		return _wrap_rcPolyMesh_borderSize_get(swigCPtr);
	}

	public static function create():rcPolyMesh {
		var obj = new rcPolyMesh();
		obj.swigCPtr = _wrap_new_rcPolyMesh();
		return obj;
	}

	public function destroy():void {
		_wrap_delete_rcPolyMesh(swigCPtr);
	}

}


public class rcPolyMeshDetail {
	public var swigCPtr:int;
	public function set meshes(meshes:int):void {
		_wrap_rcPolyMeshDetail_meshes_set(swigCPtr, meshes);
	}

	public function get meshes():int {
		return _wrap_rcPolyMeshDetail_meshes_get(swigCPtr);
	}

	public function set verts(verts:int):void {
		_wrap_rcPolyMeshDetail_verts_set(swigCPtr, verts);
	}

	public function get verts():int {
		return _wrap_rcPolyMeshDetail_verts_get(swigCPtr);
	}

	public function set tris(tris:int):void {
		_wrap_rcPolyMeshDetail_tris_set(swigCPtr, tris);
	}

	public function get tris():int {
		return _wrap_rcPolyMeshDetail_tris_get(swigCPtr);
	}

	public function set nmeshes(nmeshes:int):void {
		_wrap_rcPolyMeshDetail_nmeshes_set(swigCPtr, nmeshes);
	}

	public function get nmeshes():int {
		return _wrap_rcPolyMeshDetail_nmeshes_get(swigCPtr);
	}

	public function set nverts(nverts:int):void {
		_wrap_rcPolyMeshDetail_nverts_set(swigCPtr, nverts);
	}

	public function get nverts():int {
		return _wrap_rcPolyMeshDetail_nverts_get(swigCPtr);
	}

	public function set ntris(ntris:int):void {
		_wrap_rcPolyMeshDetail_ntris_set(swigCPtr, ntris);
	}

	public function get ntris():int {
		return _wrap_rcPolyMeshDetail_ntris_get(swigCPtr);
	}

	public static function create():rcPolyMeshDetail {
		var obj = new rcPolyMeshDetail();
		obj.swigCPtr = _wrap_new_rcPolyMeshDetail();
		return obj;
	}

	public function destroy():void {
		_wrap_delete_rcPolyMeshDetail(swigCPtr);
	}

}


public class AS3_rcContext extends rcContext {
	public static function create():AS3_rcContext {
		var obj = new AS3_rcContext();
		obj.swigCPtr = _wrap_new_AS3_rcContext();
		return obj;
	}

	override public function destroy():void {
		_wrap_delete_AS3_rcContext(swigCPtr);
	}

}


public class Sample {
	public var swigCPtr:int;
	public function set m_cellSize(m_cellSize:Number):void {
		_wrap_Sample_m_cellSize_set(swigCPtr, m_cellSize);
	}

	public function get m_cellSize():Number {
		return _wrap_Sample_m_cellSize_get(swigCPtr);
	}

	public function set m_cellHeight(m_cellHeight:Number):void {
		_wrap_Sample_m_cellHeight_set(swigCPtr, m_cellHeight);
	}

	public function get m_cellHeight():Number {
		return _wrap_Sample_m_cellHeight_get(swigCPtr);
	}

	public function set m_agentHeight(m_agentHeight:Number):void {
		_wrap_Sample_m_agentHeight_set(swigCPtr, m_agentHeight);
	}

	public function get m_agentHeight():Number {
		return _wrap_Sample_m_agentHeight_get(swigCPtr);
	}

	public function set m_agentRadius(m_agentRadius:Number):void {
		_wrap_Sample_m_agentRadius_set(swigCPtr, m_agentRadius);
	}

	public function get m_agentRadius():Number {
		return _wrap_Sample_m_agentRadius_get(swigCPtr);
	}

	public function set m_agentMaxClimb(m_agentMaxClimb:Number):void {
		_wrap_Sample_m_agentMaxClimb_set(swigCPtr, m_agentMaxClimb);
	}

	public function get m_agentMaxClimb():Number {
		return _wrap_Sample_m_agentMaxClimb_get(swigCPtr);
	}

	public function set m_agentMaxSlope(m_agentMaxSlope:Number):void {
		_wrap_Sample_m_agentMaxSlope_set(swigCPtr, m_agentMaxSlope);
	}

	public function get m_agentMaxSlope():Number {
		return _wrap_Sample_m_agentMaxSlope_get(swigCPtr);
	}

	public function set m_regionMinSize(m_regionMinSize:Number):void {
		_wrap_Sample_m_regionMinSize_set(swigCPtr, m_regionMinSize);
	}

	public function get m_regionMinSize():Number {
		return _wrap_Sample_m_regionMinSize_get(swigCPtr);
	}

	public function set m_regionMergeSize(m_regionMergeSize:Number):void {
		_wrap_Sample_m_regionMergeSize_set(swigCPtr, m_regionMergeSize);
	}

	public function get m_regionMergeSize():Number {
		return _wrap_Sample_m_regionMergeSize_get(swigCPtr);
	}

	public function set m_monotonePartitioning(m_monotonePartitioning:Boolean):void {
		_wrap_Sample_m_monotonePartitioning_set(swigCPtr, m_monotonePartitioning);
	}

	public function get m_monotonePartitioning():Boolean {
		return _wrap_Sample_m_monotonePartitioning_get(swigCPtr);
	}

	public function set m_edgeMaxLen(m_edgeMaxLen:Number):void {
		_wrap_Sample_m_edgeMaxLen_set(swigCPtr, m_edgeMaxLen);
	}

	public function get m_edgeMaxLen():Number {
		return _wrap_Sample_m_edgeMaxLen_get(swigCPtr);
	}

	public function set m_edgeMaxError(m_edgeMaxError:Number):void {
		_wrap_Sample_m_edgeMaxError_set(swigCPtr, m_edgeMaxError);
	}

	public function get m_edgeMaxError():Number {
		return _wrap_Sample_m_edgeMaxError_get(swigCPtr);
	}

	public function set m_vertsPerPoly(m_vertsPerPoly:Number):void {
		_wrap_Sample_m_vertsPerPoly_set(swigCPtr, m_vertsPerPoly);
	}

	public function get m_vertsPerPoly():Number {
		return _wrap_Sample_m_vertsPerPoly_get(swigCPtr);
	}

	public function set m_detailSampleDist(m_detailSampleDist:Number):void {
		_wrap_Sample_m_detailSampleDist_set(swigCPtr, m_detailSampleDist);
	}

	public function get m_detailSampleDist():Number {
		return _wrap_Sample_m_detailSampleDist_get(swigCPtr);
	}

	public function set m_detailSampleMaxError(m_detailSampleMaxError:Number):void {
		_wrap_Sample_m_detailSampleMaxError_set(swigCPtr, m_detailSampleMaxError);
	}

	public function get m_detailSampleMaxError():Number {
		return _wrap_Sample_m_detailSampleMaxError_get(swigCPtr);
	}

	public function destroy():void {
		_wrap_delete_Sample(swigCPtr);
	}

	public function handleSettings():void {
		_wrap_Sample_handleSettings(swigCPtr);
	}

	public function handleStep():void {
		_wrap_Sample_handleStep(swigCPtr);
	}

	public function handleMeshChanged(geom:int):void {
		_wrap_Sample_handleMeshChanged(swigCPtr, geom);
	}

	public function handleBuild():Boolean {
		return _wrap_Sample_handleBuild(swigCPtr);
	}

	public function handleUpdate(dt:Number):void {
		_wrap_Sample_handleUpdate(swigCPtr, dt);
	}

	public function setContext(ctx:int):void {
		_wrap_Sample_setContext(swigCPtr, ctx);
	}

	public function getInputGeom():int {
		return _wrap_Sample_getInputGeom(swigCPtr);
	}

	public function getNavMesh():int {
		return _wrap_Sample_getNavMesh(swigCPtr);
	}

	public function getNavMeshQuery():int {
		return _wrap_Sample_getNavMeshQuery(swigCPtr);
	}

	public function getCrowd():int {
		return _wrap_Sample_getCrowd(swigCPtr);
	}

	public function getAgentRadius():Number {
		return _wrap_Sample_getAgentRadius(swigCPtr);
	}

	public function getAgentHeight():Number {
		return _wrap_Sample_getAgentHeight(swigCPtr);
	}

	public function getAgentClimb():Number {
		return _wrap_Sample_getAgentClimb(swigCPtr);
	}

	public function getBoundsMin():int {
		return _wrap_Sample_getBoundsMin(swigCPtr);
	}

	public function getBoundsMax():int {
		return _wrap_Sample_getBoundsMax(swigCPtr);
	}

}


public class Sample_TempObstacles extends Sample {
	override public function destroy():void {
		_wrap_delete_Sample_TempObstacles(swigCPtr);
	}

	override public function handleSettings():void {
		_wrap_Sample_TempObstacles_handleSettings(swigCPtr);
	}

	override public function handleMeshChanged(geom:int):void {
		_wrap_Sample_TempObstacles_handleMeshChanged(swigCPtr, geom);
	}

	override public function handleBuild():Boolean {
		return _wrap_Sample_TempObstacles_handleBuild(swigCPtr);
	}

	override public function handleUpdate(dt:Number):void {
		_wrap_Sample_TempObstacles_handleUpdate(swigCPtr, dt);
	}

	public function set m_tileSize(m_tileSize:Number):void {
		_wrap_Sample_TempObstacles_m_tileSize_set(swigCPtr, m_tileSize);
	}

	public function get m_tileSize():Number {
		return _wrap_Sample_TempObstacles_m_tileSize_get(swigCPtr);
	}

	public function set m_maxObstacles(m_maxObstacles:Number):void {
		_wrap_Sample_TempObstacles_m_maxObstacles_set(swigCPtr, m_maxObstacles);
	}

	public function get m_maxObstacles():Number {
		return _wrap_Sample_TempObstacles_m_maxObstacles_get(swigCPtr);
	}

}


public class ConvexVolume {
	public var swigCPtr:int;
	public function set verts(verts:int):void {
		_wrap_ConvexVolume_verts_set(swigCPtr, verts);
	}

	public function get verts():int {
		return _wrap_ConvexVolume_verts_get(swigCPtr);
	}

	public function set hmin(hmin:Number):void {
		_wrap_ConvexVolume_hmin_set(swigCPtr, hmin);
	}

	public function get hmin():Number {
		return _wrap_ConvexVolume_hmin_get(swigCPtr);
	}

	public function set hmax(hmax:Number):void {
		_wrap_ConvexVolume_hmax_set(swigCPtr, hmax);
	}

	public function get hmax():Number {
		return _wrap_ConvexVolume_hmax_get(swigCPtr);
	}

	public function set nverts(nverts:int):void {
		_wrap_ConvexVolume_nverts_set(swigCPtr, nverts);
	}

	public function get nverts():int {
		return _wrap_ConvexVolume_nverts_get(swigCPtr);
	}

	public function set area(area:int):void {
		_wrap_ConvexVolume_area_set(swigCPtr, area);
	}

	public function get area():int {
		return _wrap_ConvexVolume_area_get(swigCPtr);
	}

	public static function create():ConvexVolume {
		var obj = new ConvexVolume();
		obj.swigCPtr = _wrap_new_ConvexVolume();
		return obj;
	}

	public function destroy():void {
		_wrap_delete_ConvexVolume(swigCPtr);
	}

}


public class InputGeom {
	public var swigCPtr:int;
	public function loadMesh(ctx:int, filepath:String):Boolean {
		return _wrap_InputGeom_loadMesh(swigCPtr, ctx, filepath);
	}

	public function getMesh():int {
		return _wrap_InputGeom_getMesh(swigCPtr);
	}

	public function getMeshBoundsMin():int {
		return _wrap_InputGeom_getMeshBoundsMin(swigCPtr);
	}

	public function getMeshBoundsMax():int {
		return _wrap_InputGeom_getMeshBoundsMax(swigCPtr);
	}

	public function getChunkyMesh():int {
		return _wrap_InputGeom_getChunkyMesh(swigCPtr);
	}

	public function getOffMeshConnectionCount():int {
		return _wrap_InputGeom_getOffMeshConnectionCount(swigCPtr);
	}

	public function getOffMeshConnectionVerts():int {
		return _wrap_InputGeom_getOffMeshConnectionVerts(swigCPtr);
	}

	public function getOffMeshConnectionRads():int {
		return _wrap_InputGeom_getOffMeshConnectionRads(swigCPtr);
	}

	public function getOffMeshConnectionDirs():int {
		return _wrap_InputGeom_getOffMeshConnectionDirs(swigCPtr);
	}

	public function getOffMeshConnectionAreas():int {
		return _wrap_InputGeom_getOffMeshConnectionAreas(swigCPtr);
	}

	public function getOffMeshConnectionFlags():int {
		return _wrap_InputGeom_getOffMeshConnectionFlags(swigCPtr);
	}

	public function getOffMeshConnectionId():int {
		return _wrap_InputGeom_getOffMeshConnectionId(swigCPtr);
	}

	public function getConvexVolumeCount():int {
		return _wrap_InputGeom_getConvexVolumeCount(swigCPtr);
	}

	public function getConvexVolumes():int {
		return _wrap_InputGeom_getConvexVolumes(swigCPtr);
	}

}

} /* package */
